CWASTEText Classes
A set of classes for using WASTE with the Think Class Libraries
by Dan Crevier (mailto:dan@rhino.harvard.edu)
Signficant contributions by Mark Alldritt
version 1.6
May 24, 1995

Introduction

    This is a set of classes I've written to use Marco Piovanelli's text edit replacement WASTE with the Think Class Libraries.  It only works with versions 2.0.3 or later of TCL.  It works with WASTE 1.0 or WASTE 1.1a7 or greater.  Note: I haven't tested it with WASTE 1.0 in a while, but it should work in theory.

     I wanted to use WASTE in one of my applications mainly for the ability to use more than 32K of text, and to use inline input for Japanese.  I am releasing these classes as public domain, so you are free to use them as you see fit.  Remember to give Marco Piovanelli credit if you use WASTE, and you can give me some credit if you feel like it.  If you use these classes, I'd be very interested in any bug reports (especially if they include fixes) and any improvements anyone makes.  I'd like to thank Marco Piovanelli both for making WASTE available and for his help in figuring out how to get it to work with the class libraries.

     If you have used a previous version of the classes, see the what's new section.

    There are 6 classes included.  They are:
     CWASTEText - a subclass of CAbstractText which is much like CStyleText
     CWASTEDlgText - a subclass of CWASTEText which is a bit like
             CDialogText, but without all of the validation features.  It
             has a border, broadcasts changes when the text changes,
             and passes return, enter and escape to the supervisor.
     CTSMSwitchboard - a subclass of CSwitchboard which deals
             with Text Service Manager events.
     CWASTEEditTask - a class for handling undo with CWASTEText with WASTE 1.0
     CWASTEStyleTask - a class for handling undo'ing style changes with CWASTEText
              with WASTE 1.0
     CWASTETask - a class for handling undo with WASTE 1.1.

     I've also included a slightly modified version of TinyEdit, called WASTEEdit, which uses WASTE as a simple example program.

     You are free to use these classes in any of your products (freeware, shareware, or commercial).

Adding WASTE Support

     If you wish to use these classes in your application, you need to add the following to your application class:

     Near the top:

#include "WASTE.h"
#ifndef __SCRIPT__
#include <Script.h>
#endif

#include "CTSMSwitchboard.h"

static Boolean	TSMAvailable(void);

short gUsingTSM = false;

     In the constructor:

	gUsingTSM = TSMAvailable();
	if (gUsingTSM) gUsingTSM = (InitTSMAwareApplication()==noErr);

     In the destructor:

	if (gUsingTSM) CloseTSMAwareApplication();

     Functions to add:

/*** make TSMSwitchboard ***/
void CEditApp::MakeSwitchboard( void)
{
	if (gSystem.hasAppleEvents && gUsingTSM)
	{
		FailOSErr(WEInstallTSMHandlers());
	}
	itsSwitchboard = (CSwitchboard *)new CTSMSwitchboard();
	itsSwitchboard->InitAppleEvents();
}


static Boolean TSMAvailable(void)
{
	long	response;
	
	return (Gestalt(gestaltTSMgrVersion, &response)==noErr);
}

     To header file:

virtual void MakeSwitchboard(void);

     See WASTEEdit for an example.  Most of this stuff is to provide inline input.  Even if you don't use Japanese on your system, I recommend leaving the support there for those that do have inline input.

CWASTEText

     CWASTEText is a subclass of CAbstractText, and is very similar to CStyleText.  In addition, I have added the following functions:

     StopInlineSession() - Stops the current inline input session
          and validates the text.
     InsertWithStyle() - Lets you insert some text and it's
          corresponding StScrpHandle information all in one step.
     InsertWithStyleSoup() - Lets you insert some text and it's
          corresponding StScrpHandle information and soup all in one step.
          (WASTE 1.1 only)
     Clear() - clears the text in the class without any excess
          highlighting.
     CopyRangeWithStyle() - gets the text and styles for a range
          of text all in one step.
     CopyRangeWithStyleSoup() - gets the text, styles, and soup for a range
          of text all in one step. (WASTE 1.1 only)
     SetOutlineHighlighting() - turns outline highlighting on or off.  Returns old
          setting.
     SetFontNumberAll() - sets the font of all of the text.
     SetFontNameAll() - sets the font of all of the text.
     SetFontSizeAll() - sets the size of all of the text.
     SetFontStyleAll() - applies a style to all of the text
     TempSelectAll() - temporarily selects all of the text while deactivating the text
          and turning off outline hilighting so that the selection won't show up.  It can
          be restored by Restore selection.  This is useful when you want to apply
          something to all of the text without seeing all of the text flash.  It is a
          protected routine used by Clear() and the Set*All() functions.
     SetFontColor() - sets the color of the selection
     SetFontColorAll() -sets the color of all of the text
     InsertPicture() - inserts a picture at the current insertion point (WASTE 1.1 only)
     InsertSound() - inserts a sound at the current insertion point (WASTE 1.1 only)
     InstallDragHandlers() - installs the necessary handlers to receive drags (see
          Drag and Drop section below)
     RemoveDragHandlers() - removes drag handlers
     CopyWithStyleSoup() - copies text with style and soup information (WASTE 1.1 only)
     InstallTabHandlers() - installs hooks for using tab code (with CWASTE 1.1r7 or later only)

     TCL isn't good at supporting text without fixed height lines.  SetWholeLines(true) doesn't work well.  I set the scrolling steps to 12 vertically and 4 horizontally when it's in a scroll pane.  Something more intelligent could probably be done.

CWASTEDlgText

     CWASTEDlgText was made to provide some of the funcitonality of CDialogText.  A dialogTextChanged message is broadcast when the text is changed.  This wasn't easy for text being entered with inline input, but I think I have it working with a WEPostUpdate routine.  It may be broadcasting the message more often than it needs to, but that's ok with me.
     It also has a border, just like CDialogText, and passes tab, return, enter, and escape to the supervisor instead of typing them.
     I added the GetTextString() method to get the text into a Str255.

CTSMSwitchboard

     This is a subclass of CSwitchboard which handles Text Service Manager events.

Undo Support

     With WASTE 1.0, the two classes CWASTEEditTask and CWASTEStyleTask are used for undo support.  With WASTE 1.1, the class CWASTETask is used to provide undo support using WASTE 1.1's built in undo support.   You need to add the appropriate classes to your project.  When using CWASTETask, you must add the string "Drag" to STR# resource 130 so you get the "Undo Drag" message in the edit window.

Drag and Drop support

     WASTE 1.1 supports dragging and dropping of text.  You don't have to do any work to make it so that users can drag text out of CWASTEText panes.  If you want to let the user drag text into a CWASTEText pane, you should call CWASTEText::InstallDragHandlers() for that pane.  Note: you cannot call InstallDragHandlers() for more than one CWASTEText pane per window.  I hope to be able to remove this restriction soon, but it will require some minor modifications to WASTE itself.  Before you can call InstallDrag Handlers, you must add the following to your application class:

At the top:

#include <FragLoad.h>
#include <Drag.h>
static Boolean	DragAndDropAvailable(void);
Boolean gHasDragAndDrop = false;

In the constructor:

	gHasDragAndDrop = DragAndDropAvailable();

Anywhere else:

/******************************************************************************
 DragAndDropAvailable - returns true if drag and drop is available
 ******************************************************************************/

static Boolean DragAndDropAvailable(void)
{
	long response;

	if (Gestalt(gestaltDragMgrAttr, &response) != noErr) return false;
	if ((response & (1 << gestaltDragMgrPresent)) == 0) return false;
	if ((Ptr)InstallTrackingHandler == kUnresolvedSymbolAddress) return false;
	return true;
}

WASTE Object Handler Archive

     If WASTE_OBJECT_ARCHIVE is defined, CWASTEText will use Michael Kamprath's WASTE Object Handler Archive for the object handlers.  In this case, you don't need to add the WASTE TCL sound icon resource (but you must include the Object Archive one).  It also adds the function InsertFSSpec().

WASTEEdit

     WASTEEdit is a slightly modified version of TinyEdit to get it to work with WASTE.  I tried to do the minimum modifications necessary to get it to work, so I haven't added any functionality.  With a little work, I think a nice application could be made out of it.  Right now, it's almost 10 times as big as WASTE Demo, and doesn't do quite as much.  It would be really great if someone wanted to add all the scripting support to it, so we would have a nice replacement for the Scriptable Text Editor.
     I compiled this version with the WASTE Object Handler Archive, CWASTE 1.1r13 with Internet Config support (so cmd-clicking URL's should work), and the tab support code.  You may need to change the #defines in the prefix options and change the files that are included in the project.

What's new

     ¥ Version 1.1
     Unfortunately I haven't kept track of the changes made in the classes very well.  There were many changes, most of them for improved error checking.  Marco Piovanelli and Mark Alldritt made many contributions, and I made some changes myself.  Also, I have used the classes with my port of WASTE to C.  In the file CWASTEText.cpp, you need to define/undefine CWASTE depending on whether or not you are using the C version of WASTE.

     ¥ Version 1.2
     The most significant change for this version is support for WASTE 1.1.  It includes drag and drop support as well as support for inserting pictures.  Also, I have incorporated some bug fixes by Martin Fricke and some of my own.

     ¥ Version 1.3
     Added functions InsertWithStyleSoup and CopyWithStyleSoup which insert/copy the text, styles, and soup. 
     As of WASTE 1.1a5 and CWASTE1.1r7 and later, the way tab code is handled is different.  In CWASTEText.h, #define WASTE_TABS if you are using one of these new versions, and WASTE_AUTO_TABS if you want the tab handlers to be automatically installed.  Otherwise, you have to install InstallTabHandlers for each CWASTEText that you want to use tabs in.

     ¥ Version 1.4
     Added sound handlers as donated by Leonard Rosenthal.  Added InsertSound() to add sounds.  You must add the resource file "Sound Icon.rsrc" to your project.
     Modified CEditDoc to save/load style and soup information.
     Stopped including WASTEEdit 1.0 (WASTE 1.1 is very stable)
     If you make Brian L. Matthews <blm@halcyon.com>'s modifications to TCL, click-through will be supported (you can drag something out of a window even if it isn't in front).  Note:  The demo isn't compiled with this support.

     ¥ Version 1.5
     Changed to work with WASTE 1.1a7 (CWASTE 1.1r12) or later.  Will not work with earlier version of WASTE 1.1.
     Note: IViewTemp won't work for specifying non-editable text because macWE isn't set up before specify is called, so it can't set the readonly flag for the WASTE instance.  It shouldn't be hard to fix this, or work around it.
     Added post update proc to make it keep up with typing that goes outside of the visible area during inline input, as suggested by Martin Sladok.
     There are probably other changes I forgot to document.

     ¥ Version 1.6
     Modified UpdateMenu() to check the correct color item in the menu.
     Added WASTETask class to provide undo support using WASTE 1.1 built in support (thanks to help from Jud Spencer).  It may not allow styling of pane's with styleable==false.
     Pre and post update routines moved to static functions.

Dan Crevier
mailto:dan@rhino.harvard.edu
http://rhino.harvard.edu/dan/home.html
