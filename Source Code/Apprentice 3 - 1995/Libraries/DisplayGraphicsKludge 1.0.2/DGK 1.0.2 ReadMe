DisplayGraphicsKludge  1.0.2
note:  this document has styles & colors, it's best viewed using SimpleText.

Written by:
    Samuel Herschbein
    Center for Bioengineering WD-12
    University of Washington
    Seattle, WA  98195
    Internet: sam@bioeng.washington.edu

What is DisplayGraphicsKludge?
     DisplayGraphicsKludge gives vanilla (ordinary) C programs access to the Mac's graphics, without needing to know how to program the Mac's Graphic User Interface (GUI).  
     DisplayGraphicsKludge is a C procedure that graphically displays any contiguous area of your C program's memory (RAM image) as a 2 dimensional uniformly distributed 256 level gray scale image.  The image data in memory is interpreted as one byte per pixel, where 0 = black and 255 = white.  The image is displayed in a dialog box.  The gray scale image can be printed or saved to the disk as a TeachText/SimpleText PICT file.
     DisplayGraphicsKludge requires that your computer's leftmost monitor be set to 256 or millions of colors/greys (black&white, 4, 16, & thousands will not work OK).

     DisplayGraphicsKludge is free, courtesy of the Center for Bioengineering at the University of Washington.

     I wrote DisplayGraphicsKludge to assist our graduate students.  They do image acquisition & processing using their own C programs, and need to see the images from within these C programs.  For example, one student's C program operates a computer controlled microscope.  They have more important things to do than spend time learning how to write full-blown Mac applications (or so they tell meÉ).

     Since DisplayGraphicsKludge was written for novice C programmers, it is heavily commented, formatted for easy reading, and written without any ÒtricksÓ.

     Here's a sample window (the code used to display this image is at end of this document).  Each pixel row is a different gray scale value (if you see bands instead of a smooth transition: you can set your monitor to 256 gray levels).

Ê




















     Here's another sample window.  Each pixel column is a different gray scale value.

Ê




















How DisplayGraphicsKludge Works->
          DisplayGraphicsKludge requires that your computer's leftmost monitor be set to 256 or millions of colors/greys (black&white, 4, 16, & thousands will not work OK).
Set the monitor depth using the ÒMonitorsÓ control panel before running your program containing DisplayGraphicsKludge.
     After being called, DisplayGraphicsKludge opens a Mac dialog window (see above sample).  The window contains the image and three buttons located below the image, ÒPrintÓ, ÒSaveÉÓ, and ÒOKÓ.  Clicking the ÒPrintÓ button will bring up the standard ÒPage SetupÓ & ÒPrintÉÓ dialog boxes (if an error occurs during printing, the Mac will beep before re-drawing the image).  Clicking the ÒSaveÉÓ button will bring up the standard ÒSave AsÉÓ dialog box (if an error occurs during the Save, the Mac will beep before redrawing the image).  Clicking the ÒOKÓ button (or pressing return) will close the dialog window and return you to your C code.

What to pass the procedure->
DisplayGraphicsKludge is passed 4 parameters:
¥1¥ Str255  theImageTitle;  A ÒPascalÓ String used as the window title (and the page title if the image is printed).  ÒPascalÓ strings have their length in the first byte.  ÒCÓ strings are terminated by a null.  The first image above was passed this ÒPascalÓ string (Think C syntax):  "\p256x256 Darker Rows"

¥2¥ Ptr	  theDataPtr;  A pointer to your data (the address of your data). Cast your pointer to type Ptr, if necessary.  The data must be one byte per pixel.

¥3¥ short  HPixels;  The number of horizontal pixels in the image (#pixels per row).

¥4¥ short  VPixels;  The number of vertical pixels in the image (#rows).

     DisplayGraphicsKludge doesn't do any error checking on the parameters passed to it!  Make sure your title is a ÒPascalÓ string.  Make sure your pointer is valid.  Make sure the pixel values are positive, and that (HPixels*VPixels) = #bytes in the image.  Small images are OK, DisplayGraphicsKludge will make a minimum size window to accommodate its buttons.

It crashed, why?
     If you crash without anything displayed, you probably passed an invalid pointer (address of your data).  If the dialog window is not the right size or is not located in the upper left of the monitor, you probably passed bad HPixel and/or VPixel values.  If the image is so large you can't see the buttons: just press return (same as clicking OK button).  If the window title is weird, you probably passed a C string instead of a Pascal string.

Why can't I use Think C's text window for graphics?
This info is for ÒtechiesÓ & the really curiousÉ
    If your Mac C program uses the stdio/ANSI routines (printf, scanf, etc.), the Think C compiler automatically adds a ÒshellÓ that interfaces to the user via the text window.  This ÒshellÓ converts the Mac's GUI interface to a text window that acts like an ASCII terminal (character based, 24x80).  For this type of program, there is no easy interface to the Mac's graphics.
     You could attempt to take over the front window and draw to it, but Think C opens this window using the Toolbox call NewWindow.  To have full color/grayscale, a window must be opened using NewCWindow.
     The only choice is for your code to open a new window.  If you open a normal window, the ÒshellÓ won't know how to handle events in that window.  The easiest solution is to open a dialog window and let the Toolbox routine ModalDialog handle all the events.  The downside is that the Mac is Òlocked upÓ in a modal dialog as long as the image is displayed (you can't access any other windows or any menus).

Why doesn't the image always re-draw?
     Hey, this is a ÒkludgeÓ, not a full featured applicationÉ  To re-draw the image when it is written over by another dialog box or a screen dimmer, I would have to add another procedure to the code.  Having a single procedure with everything defined in it gives the user (you) maximum flexibility when incorporating this in your application.

Why do I have to change my monitor's depth to 256 colors?
     Again, this is a ÒkludgeÓ, not a full featured applicationÉ  I didn't want to put all the code in to do this right for all Macs & all System versions.  If you feel that this is a requirement, let me know - when (if?) I have spare time I'll ÒkludgeÓ it in.

Using the demo project->
     I removed the objects to save disk space & modem time.  The code of the shell is listed below (sans includes).  If you're familiar with Think C, you'll probably want to trash these files:
Ê



Code used to create & display images above:
main()
{
#define				PixelsPerRow	 256
#define				NumRows			    256

char				   *myDataPtr;
long    			NumBytes;
long    			column;
long    			row;
char				   theChar;

NumBytes = (long)PixelsPerRow * (long)NumRows;
myDataPtr = NewPtr(NumBytes);

if (myDataPtr == nil)
	printf("Not Enough Memory!\n\n");
else
  {
    printf("... normally this is printf & scanf output/input ...\n");
    printf("... normally this is printf & scanf output/input ...\n\n");
    printf("Press return to display an image where each row gets darker... ");
    theChar = getchar();

	for (row = 0; row < NumRows; row++)
		for (column = 0; column < PixelsPerRow; column++)
			*(myDataPtr + column + (row * PixelsPerRow)) = 255 - row;					/* each row is a darker shade				*/

    DisplayGraphicsKludge("\p256x256 Darker Rows", (Ptr)myDataPtr, PixelsPerRow, NumRows);

    printf("\n...Now you're back in your code...\n\n");
    printf("Press return to display an image where each column gets darker... ");
    theChar = getchar();
    
	for (row = 0; row < NumRows; row++)
		for (column = 0; column < PixelsPerRow; column++)
			*(myDataPtr + column + (row * PixelsPerRow)) = 255 - column;				/* each column is a darker shade			*/

    DisplayGraphicsKludge("\p256x256 Darker Cols", (Ptr)myDataPtr, PixelsPerRow, NumRows);

    printf("\n...Now you're back in your code...\n\n");
  }
printf("\nPress return to exit this demo...");

}


Version Info:
1.0.0 - First released into the ÒWild ComputerdomÓ.  Bugs?  Nah, it's too smallÉÉÉ
1.0.1 - Oops, forgot to document that the monitor must be set to 256 colors/grays.
1.0.2 - Oops, changed some ints to shorts & longs for ÒtotalÓ portability.

Contacting the author:
    Samuel Herschbein
    Center for Bioengineering WD-12
    University of Washington
    Seattle, WA  98195
    Internet: sam@bioeng.washington.edu


