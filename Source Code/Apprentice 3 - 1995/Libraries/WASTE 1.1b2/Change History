Changes from 1.1b1 to 1.1b2• Upgraded to CW6 and to version 2.0 of the Universal Pascal Interfaces.  This required minor changes to the WASTE Demo code (thanks to John C. Daub).• The previous release had incorrect function declarations in the pascal interface files: parameters bigger than four bytes were passed by value while they should have been passed as {const} var parameters in order to compile correctly with Metrowerks Pascal PPC.Some minor changes to the code fixed the problem and I was eventually able to use MW Pascal PPC 1.1 to create a native app from the pascal sources that actually worked on a PowerMacintosh.• The munged interface files needed to compile WASTE and the WASTE Demo with THINK Pascal 4.0.2 are now included in the main distribution archive.  Also included are some files from the Internet Config Programmer’s Kit needed to compile the demo app.Changes from 1.1a9 to 1.1b1First of all, I’d like to thank all the people who helped WASTE win the Usenet Macintosh Programming Award for the best freeware of the year, with their contributions to the development of WASTE or with their votes.  I think Dan deserves special thanks for maintaining the C version, without which WASTE could never become so popular.Updated DocumentationAPI Changes• Following a suggestion by Michael Kamprath, I changed the semantics of the weFDragAndDrop flag.  Setting this flag, using either WENew or WEFeatureFlag, now means that your application is drag and drop aware and wants WEClick and WEAdjustCursor to behave accordingly.  It does no longer mean that the Drag Manager is available and WENew no longer sets this bit automatically if the Drag Manager is available.  If you want your application to take advantage of the built-in drag and drop support, now you must explicitly pass weDoDragAndDrop to WENew.  WASTE will ignore the setting of this flag if the Drag Manager is not available.Support for Internet Config 1.1• Starting from this release, the WASTE Demo supports command clicking of URLs via Internet Config 1.1.  A few lines of code, stolen from the ICeTEe sources and slightly modified, were enough to add this cool feature to WASTE, thanks to the simplicity of Internet Config’s API.Bug Fixes• Peter DiCamillo discovered a nasty bug which causes horrible crashes when the selection range extends partially above the view rectangle and you drag it to the trash.  Peter didn’t just find the bug: he also showed us how to fix it.• Because of a stupid bug introduced in version 1.1a9, WECalText failed to lock the instance record, potentially causing all sorts of crashes.• Previously WASTE would call the application-supplied scroll callback every time an editing action might have changed the destination rectangle, even if it actually hadn’t.  Now, before calling your scroll callback, WASTE makes sure that the destination rectangle has actually been changed, either because of auto-scrolling or because of a change in the total text height; remember that WASTE changes destRect.bottom so that (destRect.bottom - destRect.top) always equals the text height.• WEDispose failed to release the memory allocated for the instance-specific object handler table, thus causing a memory leak if you registered instance-specific object handlers.  This bug has been fixed.•I fixed a minor quirk in the tab code and rewrote some portions of it.Changes from 1.1a8 to 1.1a9Support for the Metrowerks compilers• The Pascal source code for both WASTE and the demo app can now be compiled with either THINK Pascal or Metrowerks Pascal.To compile the source code with THINK Pascal, you’ll need an ad hoc, “thinkified” version of the universal headers, available in a separate archive.A big “thank you!” goes to Greg Galanos for sending me a complimentary copy of CodeWarrior Gold Academic.• WASTE.o.lib, a 68K library ready for inclusion in CodeWarrior 68K projects, is now included in this package.  The symbols in this library are all-uppercase to comply with the convention supported by CodeWarrior for exported pascal functions.Bug Fixes• A slight change of the _WERedrawLines routine is supposed to fix an offscreen gworld-related bug which manifested itself on systems with multiple monitors.  Thanks to Mark Alldritt for suggesting this fix.Other Changes• The WECalText routine now automatically redraws the text.• I eventually included (with slight changes) the WESMARTRECALCSLOP optimization suggested long ago by Leonard Rosenthol and already available in the C version.Changes from 1.1a7 to 1.1a8Header Changes• Fixed a bunch of typos in WASTE.h (the previous version wouldn’t even compile — oops!).Bug Fixes• _WEHandlePositionToOffset was lying to inline input components by returning bogus offsets for points in the active input area.  It surprised me that I didn’t catch this one before, but apparently Kotoeri (the Apple supplied inline input component for Japanese) doesn’t use the offset information anyway.  Thanks to Martin Sladok for pointing out this bug.• WESetSelection no longer invalidates the null scrap if the selection range isn’t changed.• WECut and WECopy now return an error code if the selection is empty.• WECanPaste now always returns FALSE for read-only instances.Source Code Changes• In a couple of spots, WASTE would call the Script Manager routines CharByte and CharType directly: now it always uses the hook routines instead (the default hooks, in turn, call CharByte / CharType or their modern replacements CharacterByteType / CharacterType).• The line break hook in WETabs.p should work now.Changes from 1.1a6 to 1.1a7Bug Fixes• Fixed a very stupid bug in _WEGetIndObjectType.  This was causing the demo app to freeze if you tried to access the menus while there was no pasteable item on the clipboard.Source Code Changes• Switched to Universal Headers 2.0a3 for Pascal.  I had to tweak the headers considerably to make them compile under THINK Pascal.• Lots of formal changes to the source code in an attempt to improve portability (although I’m afraid changes are still necessary in order to compile the sources with MPW or Metrowerks Pascal).  Also added a bunch of PowerPC-related stuff (not complete).• In WEInlineInput.p, changed keyAETextFont and keyAETextPointSize to keyAETSMTextFont and keyAETSMTextPointSize.  Apparently, there were conficting declarations in AERegistry.p and TextServices.p so Apple had to rename some constants.• Added WERemoveTSMHandlers, as in the C version.• The WASTE_OBJECTS_ARE_GLYPHS compiler switch is now FALSE by default.  As a result, a single click in the middle of an object selects it.WASTEDemo Changes• Added handlers for 'snd ' objects (thanks to Michael Kamprath for the icons).  Try this: .Changes from 1.1a5 to 1.1a6New Features• The prototypes for a couple of hook routines have been changed to match the corresponding declarations in CWASTE (version 1.1r7 and newer).• You can now install object handlers belonging to a specific WE instance.  You can still install “global” handlers like before, if you want to.  As a side-effect of this change, I had to change the prototype of two WASTE routines (sorry for the inconvenience).• You can reset the hook fields of a WE instance to their default values by calling WESetInfo with *info set to zero.• You can pass weBitToggle in WEFeatureFlag action parameter to toggle the specified feature (set-theoretic remark: so now there’s an action code for every possible function from {0, 1} to {0, 1}).API Changes (!)• WEInstallObjectHandler and WECanPaste take an additional WEHandle parameter.  Leaving this parameter NIL when calling WEInstallObjectHandler installs your handler in the global object hander table, rather than in the instance-specific table.Bug Fixes• Fixed an incompatibility with some input methods for double-byte scripts, like Apple’s input method for Simplified Chinese.  Now WASTE always removes the underline when converted text is confirmed.• It’s safe to call WEContinuousStyle without fear of WASTE writing past the end of your TextStyle record.Tabs• While porting the tab package to Pascal, I tried to break it in every possible way :-) so I came up with some changes which are supposed to fix a couple of tiny quirks in the original code (for example, double-clicking a tab didn’t seem to work as expected).  I still haven’t tested the _WETabLineBreak routine, though.WASTE Demo Changes• I incorporated the tab code provided by Mark Alldritt and Dan Crevier: the whole package can be installed and removed on the fly from the Features menu.• Added a Color menu.• Embedded object information is now saved to the resource fork of text files as a SOUP resource.• New About box.Changes from 1.1a4 to 1.1a5Bug Fixes• Following a suggestion by Alan Steremberg, I added a line of code that’s supposed to fix an incompatibility with the WorldScript Power Adapter.• Because of a bug in the _WETypeChar routine, entering double-byte characters using an input window (rather than inline input) when the selection range wasn’t empty would cause extra characters to be deleted.  This bug has been fixed.• The selection is no longer deleted when you drag it to the trash while holding down the option key.• Dragging a picture (or any non-textual flavor) to a WE instance would cause the modification count to be incremented by two (instead of one).  Fixed.• The algorithm used by the _WENewStyle routine is now a little bit more logical.• WEStopInlineSession now avoids a potentially time-consuming call to FixTSMDocument if there’s no active input area.• Empty rectangular frames are drawn in place of objects for which no draw handler has been registered.New Feature FlagAs requested by Dan, I added a new feature flag, weFReadOnly, meant to disallow changes to the text.  When this flag is set:• WEKey accepts only arrow keys.• The main TSM handler does nothing, effectively disabling inline input.• WECut works like WECopy.• WEInsert, WEInsertObject, WEDelete, WESetStyle, WEPaste and WEUndo do nothing and return a result code (weReadOnlyErr).• WETrackDrag ignores all drags.• WEReceiveDrag always returns badDragFlavorErr.• WEClick doesn’t delete the selection if you drag it to the trash.I haven’t tested this new feature carefully yet.New HooksSeveral Toolbox routines, like DrawJustified and StyledLineBreak, are now called through wrapper routines that can be replaced by custom hooks.The main reason for this is that I wanted to take advantage of the tab code written by Mark and Dan without actually incorporating the code into the library itself.  In the future, other cool features, like “Show invisibles”, could be implemented by writing custom hooks.Now, the hook approach almost works, but not quite yet.  I’m not sure I’m passing all the parameters that might be needed by the custom routine.WENew places the addresses of built-in wrappers in the hook fields of the instance record.  For some hooks (e.g. the word break hook), there are two different wrappers: one using a Toolbox routine available only with System 7.1 or newer (e.g. FindWordBreaks), the other using an obsolete routine for compatibility with System 7.0 (e.g. FindWord).With a little more code, we could add support for System 6.Universal InterfacesI changed the spelling of several Toolbox constants and routines according (I hope) to the new universal interfaces.  For example, NDrawJust is now DrawJustified.WASTE Demo ChangesThe WASTE Demo app now sports a new Features menu that lets you enable and disable specific WASTE features at any time to see what happens.