unit ICKeys;interface	uses{$ifc undefined THINK_Pascal}		Types, Files, {$endc}		AppleTalk, Aliases;const	kICRealName='RealName';	(* PString *)	kICEmail='Email';	(* PString -- user@host.domain *)	kICMailAccount='MailAccount';	(* PString -- user@host.domain *)	kICMailPassword='MailPassword';	(* PString -- scrambled *)	kICNewsAuthUsername='NewsAuthUsername';	(* PString -- host.domain *)	kICNewsAuthPassword='NewsAuthPassword';	(* PString -- scrambled *)	kICArchiePreferred='ArchiePreferred';	(* PString -- formatted *)	kICArchieAll='ArchieAll';	(* STR# -- formatted *)	kICUMichPreferred='UMichPreferred';	(* PString -- formatted *)	kICUMichAll='UMichAll';	(* STR# -- formatted *)	kICInfoMacPreferred='InfoMacPreferred';	(* PString -- formatted *)	kICInfoMacAll='InfoMacAll';	(* STR# -- formatted *)	kICPhHost='PhHost';	(* PString -- host.domain *)	kICWhoisHost='WhoisHost';	(* PString -- host.domain *)	kICFingerHost='FingerHost';	(* PString -- host.domain *)	kICFTPHost='FTPHost';	(* PString -- host.domain *)	kICTelnetHost='TelnetHost';	(* PString -- host.domain *)	kICSMTPHost='SMTPHost';	(* PString -- host.domain *)	kICNNTPHost='NNTPHost';	(* PString -- host.domain *)	kICGopherHost='GopherHost';	(* PString -- host.domain *)	kICLDAPServer='LDAPServer';	(* PString -- host.domain *)	kICLDAPSearchbase='LDAPSearchbase';	(* PString -- string LDAP thing *)	kICWWWHomePage='WWWHomePage';	(* PString -- URL *)	kICWAISGateway='WAISGateway';	(* PString -- no idea *)	kICListFont='ListFont';	(* ICFontRecord *)	kICScreenFont='ScreenFont';	(* ICFontRecord *)	kICPrinterFont='PrinterFont';	(* ICFontRecord *)	kICTextCreator='TextCreator';	(* ICAppSpec *)	kICBinaryTypeCreator='BinaryTypeCreator';	(* ICFileInfo *)	kICDownloadFolder='DownloadFolder';	(* ICFileSpec *)	kICSignature='Signature';	(* TEXT *)	kICOrganization='Organization';	(* PString *)	kICPlan='Plan';	(* TEXT *)	kICQuotingString='QuotingString';	(* PString *)	kICMailHeaders='MailHeaders';	(* TEXT *)	kICNewsHeaders='NewsHeaders';	(* TEXT *)	kICMapping='Mapping';	(* ICMapEntries *)	kICCharacterSet='CharacterSet';	(* ICCharTable *)	kICHelper='Helper¥';	(* ICAppSpec *)	kICServices='Services';	(* ICServices *)	type		ICFontRecord = record				size: integer;				face: Style;				font: Str255;			end;		ICFontRecordPtr = ^ICFontRecord;		ICFontRecordHandle = ^ICFontRecordPtr;		ICCharTable = record				net_to_mac: packed array[char] of char;				mac_to_net: packed array[char] of char;			end;		ICCharTablePtr = ^ICCharTable;		ICCharTableHandle = ^ICCharTablePtr;		ICAppSpec = record				fCreator: OSType;				name: Str63;			end;		ICAppSpecPtr = ^ICAppSpec;		ICAppSpecHandle = ^ICAppSpecPtr;		ICFileInfo = record				fType: OSType;				fCreator: OSType;				name: Str63;			end;		ICFileInfoPtr = ^ICFileInfo;		ICFileInfoHandle = ^ICFileInfoPtr;		ICFileSpec = record				vol_name: Str31;				vol_creation_date: longint;				fss: FSSpec;					(* vRefNum field is of no value *)				alias: AliasRecord; 	(* plus extra data, aliasSize 0 means no alias manager present when ICFileSpecification was created *)			end;		ICFileSpecPtr = ^ICFileSpec;		ICFileSpecHandle = ^ICFileSpecPtr;	const		ICfile_spec_header_size = sizeof(ICFileSpec) - sizeof(AliasRecord);	type		ICMapEntry = record				total_length: integer;			(* from beginning of record *)				fixed_length: integer;			(* from beginning of record *)				version: integer;				file_type: OSType;				file_creator: OSType;				post_creator : OSType;				flags: longint;				(* variable part starts here *)				extension: Str255;					(* these strings are tightly packed *)				creator_app_name: Str255;		(* which means, these ones might have an *)				post_app_name : Str255;			(* odd address *)				MIME_type: Str255;									entry_name: Str255;			end;		ICMapEntryPtr = ^ICMapEntry;		ICMapEntryHandle = ^ICMapEntryPtr;	const		(* bits and masks for the flags of the ICMapEntry *)		ICmap_binary_bit = 0;					(* file should be transfered in binary as opposed to text mode *)		ICmap_binary_mask = $00000001;		ICmap_resource_fork_bit = 1;		(* the resource fork of the file is significant *)		ICmap_resource_fork_mask = $00000002;		ICmap_data_fork_bit = 2;				(* the data fork of the file is significant *)		ICmap_data_fork_mask = $00000004;		ICmap_post_bit = 3;							(* post process using post fields *)		ICmap_post_mask = $00000008;		ICmap_not_incoming_bit = 4;			(* ignore this mapping for incoming files *)		ICmap_not_incoming_mask = $00000010;		ICmap_not_outgoing_bit = 5;			(* ignore this mapping for outgoing files *)		ICmap_not_outgoing_mask = $00000020;		ICmap_fixed_length = 22;				(* number in fixed_length field *)			type		ICServiceEntry = record				name: Str255;						(* this strings is tightly packed *)				port: integer;						(* which means, these fields might have an *)				flags: integer;						(* odd address *)			end;		ICServiceEntryPtr = ^ICServiceEntry;		ICServiceEntryHandle = ICServiceEntryPtr;		ICServices = record				count: integer;				services: array[1..1] of ICServiceEntry;		(* this array is packed, so you can't index it directly *)			end;		ICServicesPtr = ^ICServices;		ICServicesHandle = ^ICServicesPtr;	const		(* bits and masks for the flags of the ICServiceEntry *)		ICservices_tcp_bit = 0;				(* this is a TCP service *)		ICservices_tcp_mask = $00000001;		ICservices_udp_bit = 1;				(* this is a UDP service *)		ICservices_udp_mask = $00000002;		(* both bits can be set, which means the service is both TCP and UDP, eg daytime *)implementationend. (* ICKeys *)