/********************************************************/
/*                                                      */
/*                 Two Way Notes                        */
/*                 Notes for: Two_Way_List              */
/*                 Copyright 4/24/94 Hasan Edain        */
/*                 All Reights Reserved Worldwide       */
/*                                                      */
/********************************************************/

//	Please feel free to modify and use this code for any purpose, as long as you
// send me
// a) source of the modified code.
// b) licenced version of product the code is used in.
// c) notes as to how the code could be made more usefull if you tried to use it, but
// ended up not using it for any reason.
// Hasan Edain
// HasanEdain@AOL.com
// box 667 Langley Wa 98260
// fax: 206-579-6456

/*
I have long wanted a two way Linked List package that could handle any data type,
even mixed data types. This is some very early code I whiped up to do this, so 
early that I have onfused the use for the dataKey, which I had origianly thought
of as a way to distignuish what data type I had put in any given node. For the 
moment though my use only needed to be able to hanle lists of a single type, and
I needed a sort routine Prono! So I fudged. Anyway I would love to see critiques
new versions, etc... Please let me know if I am hopelessly behind the times, if 
there are other more competent packages out there I would be happy to buy them.
Questions or comments, please...
*/

/*
nodes have:
	a pointer to the previous node(itself if it is the first node)
	a pointer to the next node(itself if it is the last node)
	a pointer to void for data
	a short called dataKey
	an unsigned long for dataLength (I use this to malloc in my node allocation)
		
lists have:
	at least one node
	a pointer to the first node
	a pointer to the last node
	a pointer to the current node
	a short indicating the number of nodes in the list

each function name is fairly self explanitory, if long winded.
The sort routine is a completely stupid insertion sort, which works fine for the twenty
element lists I am manipulating, if someone were to want to make a hook for quicksort
that gave it a dataPointer, I would love to see it.
I also have not implemented a search for data function, this is because I am not yet as
used to function pointers as I sould be, I may use this as a learning opportunity.
but if you do it first, please send me a copy.
*/