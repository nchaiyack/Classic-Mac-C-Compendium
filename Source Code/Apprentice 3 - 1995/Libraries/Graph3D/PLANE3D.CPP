//******************************************************************************// Title:       Plane3D.cpp// Author:      Maarten Gribnau// Date:        07-04-1995// Purpose:     Implementation of Plane3D class.// Descrption: // Project:     Graph3D// Remarks:     //// Revision history:// Who:// Date:// What://******************************************************************************#include "Plane3D.hpp"#include <iostream.h>#include "Macros3D.h"#include "Line3D.hpp"//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: Default constructor//|//| Parameters: none//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(void){  normal.Set(REAL_ONE, 0, 0);  offset = 0;}  //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: This method creates a Plane3D from normal and offset//|//| Parameters: theNormal: normal of plane//|             theOffset: offset of plane//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(const Vector3D &theNormal, Real theOffset){   normal = theNormal;  offset = theOffset;  }  //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: This method creates a Plane3D by copying another//|//| Parameters: thePlane: Plane3D to copy//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(const Plane3D *thePlane){  normal = thePlane->normal;  offset = thePlane->offset;  } //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: This method creates a Plane3D by copying another//|//| Parameters: theNormal: Plane3D to copy//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(const Plane3D &thePlane){  normal = thePlane.normal;  offset = thePlane.offset;}  //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: This method creates a Plane3D from three points in space//|//| Parameters: point1, point2, point3: Span the plane//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(const Vector3D &point1,                 const Vector3D &point2,                 const Vector3D &point3){  Set(point1, point2, point3);}  //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Plane3D//|//| Purpose: This method creates a Plane3D from normal and point on the//|          plane//|//| Parameters: theNormal: normal of the new plane//|             point:     point on the plane//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::Plane3D(const Vector3D &theNormal, const Vector3D &point){  normal = theNormal;  offset = CalculateOffset(point);}  //==== Plane3D::Plane3D() ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::~Plane3D//|//| Purpose: This method destroys a Plane3D//|//| Parameters: none//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Plane3D::~Plane3D(void){}  //====Plane3D::~Plane3D====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Intersect//|//| Purpose: This calculates calculates this plane with the line given.//|          Graphics Gems page 299//|//| Parameters: line:      line to intersect with//|             parameter: value of parameter of this line at intersection//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Flag Plane3D::Intersect(const Line3D &line, Real &parameter){  Real dot1 = normal.Dot(line.Origin());  Real dot2 = normal.Dot(line.Direction());  if (dot2 == 0)    return FALSE;   parameter = dot1 + offset;  parameter = REAL_DIV(parameter, dot2);  parameter = -parameter;  return TRUE;  } //==== Plane3D::Intersect====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Intersect//|//| Purpose: This calculates intersection ofthis plane with the line//|          given.//|//| Parameters: line:  line to intersect with//|             point: intersection//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Flag Plane3D::Intersect(const Line3D &line, Vector3D &point){  Real parameter;  if (Intersect(line, parameter) == FALSE)    return FALSE;  line.ParameterToPoint(parameter, point);  return TRUE;	} //==== Plane3D::Intersect====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Project//|//| Purpose: Finds nearest point on plane to inPoint.//|          See Graphic Gems page 297.//|//| Parameters: inPoint:  point to project//|             outPoint: inPoint projected onto the plane//|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________void Plane3D::Project(const Vector3D &inPoint, Vector3D &outPoint){  Real k;    k  = normal.Dot(inPoint);  k += offset;  k  = REAL_DIV(k, normal.Dot(normal));  outPoint += inPoint - (outPoint * k);  } //==== Plane3D::Project====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Plane3D::Distance//|//| Purpose: Finds distance from point to plane.//|          See Graphic Gems page 297.//|//| Parameters: point: input for distance calculations //|//| Created by Maarten Gribnau//|//| Modified://|___________________________________________________________________Real Plane3D::Distance(const Vector3D &point){  Vector3D projected;    Project(point, projected);  return projected.Distance(point);  } //==== Plane3D::Distance====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Transform//|//| Purpose: This applies a transformation to this plane.//|//| Parameters: M:      the matrix of the transformation//|             result: the plane to put the result in//|//| Created by Maarten Gribnau//|___________________________________________________________________void Plane3D::Transform(const Matrix3D &M){  normal.TransformDirection(M);  // Get a point on the plane  Vector3D point(normal);  point *= offset;  point *= M;  offset = CalculateOffset(point);    }  //====Plane3D::Transform====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| TransformTo//|//| Purpose: This applies a transformation to this plane, and puts//|          the result in another plane//|//| Parameters: M:      the matrix of the transformation//|             result: the plane to put the result in//|//| Created by Maarten Gribnau//|___________________________________________________________________void Plane3D::TransformTo(const Matrix3D &M, Plane3D &result){  result.normal = normal.TransformDirectionTo(M);  Vector3D point(normal);  point *= offset;  point *= M;  result.offset = CalculateOffset(point);    }  //====Plane3D::TransformTo====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Operator << for Plane3D//| //| Purpose: This operator outputs a Plane3D to an output stream//|//| Parameters: o: the output stream//|             p: the plane to output//|//| Created by Maarten Gribnau//| //| Modified://|________________________________________________________________ostream &operator << (ostream &o, const Plane3D& p){  o << "planeNormal: " << p.normal << '\n';  o << "planeOffset: " << p.offset << '\n';  o << '\n';  return o;}  //==== operator << for Plane3D ====//|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//| Operator >> for Plane3D//| //| Purpose: This operator inputs a Plane3D from an input stream//|//| Parameters: i: the output stream//|             p: the plane//|//| Created by Maarten Gribnau//| //| Modified://|________________________________________________________________istream &operator >> (istream &in, Plane3D &p){  char dummy[25];			     in >> dummy >> p.normal;  in >> dummy >> p.offset;  return in;}  //==== operator << for Plane3D ====ªaˇÏÄ |¶NÄ  |¶ø·ˇ¸ê É‚¯î!ˇƒÄ ÄÉ  ®Ñ $,  AÇ K˚gaÄA Ä Äc  8! <ª·ˇ¸Ä |¶NÄ  |¶ø!ˇ‰ê É¢¯É"Ïî!ˇ¨®} ;C  Ä} ÉÉ  H ,8z  3ZˇˇTc<||®c `;cˇˇ;˚  Ä| >Äc  √˙H  ;ˇˇˇ,  AÇ ;ﬁˇˇà~  |cu,  AÇˇ‰Ä} *Td'>pÑ AÇ (Tcˇ@Ç  ®} |– @Ç Ä} X| @Ä É˝ XÿAÇ §}Bx8˘ ¨8€  |•*x8ü  Ä| >K˚e˘ÄA Ä} ÉÉ  Ä} *Tc'>pc AÇ 4Ä} T|¯ @Å Ä} T|{ê} TÄ} X|¯ @Å Ä} X|{ê} X®|  |¯ @Å ®|  d4|d∞|  ®| "|¯ @Å ®| "d4|d∞| ",  @Ç˛‘Ä} K˚eıÄA 8! Tª!ˇ‰Ä |¶NÄ  |¶ø·ˇ¸ê É‚¯î!ˇºÄ  8c Ä  ê 8Ä ê <8a 8K˚e¡ÄA 8† 8Ö  8a 8K˚e≈ÄA 8a 8Äü ÄÑ  Ä  ê Ä ê ®a <®ü ®ø |Ñ)÷|d∞a 88a 8Äü ÄÑ  Ä  ê  Ä ê 8! Dª·ˇ¸Ä |¶NÄ  |¶ø¡ˇ¯ê êÅ ;„  É¬¯î!ˇ∏Äa d8É 8d  K˚YëÄA Ä~ DÄÅ dêd  (  AÇ à® l®û <|  @Ç x8  H  ’8  K˚YqÄA Ä zK˚eÄA (  @Ç L8 Ä  ê 8Ä ê <8  K˚dıÄA 8a 8K˚eÄA Äû 8a 8K˚e	ÄA 8  K˚eÄA ì˛ D8! Hª¡ˇ¯Ä |¶NÄ  |¶ø·ˇ¸ê ;„  î!ˇƒÄ  ÄÇ¯êd D(  AÇ Ä  H  %Ä K˚X¡ÄA 8! <ª·ˇ¸Ä |¶NÄ  ÅB¯Åä  |`@AÇ t(  AÇ 4Åå òÅå  9j  Ñ  î  8  
|	¶Ñ î B ˇ¯® ∞ (  AÇ 4ÅÉ òÅå  Ñ  9j  î  8  
|	¶Ñ î B ˇ¯® ∞ NÄ  |¶ø¡ˇ¯ê î!ˇ¿K˚baÄA K˚\ÈÄA Äb¯Äc *Tc.˛pc AÇ XK˚b=ÄA ;„  Éˇ  K˚bΩÄA ;√  ﬁ4H  (8  3ˇ àc  |cuAÅ àˇˇ8Ä |É8òˇˇ7ﬁˇˇﬁ5@Çˇ‘K˚aÈÄA Äc  8! @ª¡ˇ¯Ä |¶NÄ  |¶ê î!ˇ»K˚aΩÄA K˚\]ÄA 8! 8Ä |¶NÄ  |¶ø!ˇ‰ê É‚¯É"Ïî!ˇÑKˇ˙Ì;√  Ä *Td'>pÑ AÇ  Td~pÑ @Ç Tcæpc @Ç H §8Å @8` K˚cÄA (  AÇ 8Å @8` K˚b˘ÄA (  AÇˇÏÄ &(  AÇ x® Tc<|~;£ `®}  ∞~  ®} ∞~ "Ä K˚a9ÄA Äﬂ &ê¡ PK˚aqÄA 8£  p•ˇˇÄ¡ P8Ä êÅ Tê° Xê¡ \Kˇ˛MÄÅ TÄ° XÄ¡ \H  ˝`   Kˇ˛›® 4c ∞ |c5®ü |  @Ç –Ä É√  Éæ >®~ <´û b||∞~ <;c  {4®~ <8c ∞~ <Ä  ê 8Ä ê <K˚b%ÄA ;C  8⁄  ®ø |• –|Ñ"x8a 8K˚bÄA 8z  K˚b)ÄA }Bx8˘ ¨Ü4|•*x8à  8}  K˚`qÄA 9  8˘ ∞|∆2x|•*xd48}  K˚`QÄA Ä K˚`’ÄA ® 8cˇˇ∞ |cx∞ 8! |ª!ˇ‰Ä |¶NÄ  |¶øÅˇê É¢¯ÉÇÏî!ˇ∏Ä} \(  @Ç L8† <Ä `ÑòÄb§K˚WπÄA ê| ,8† |Ñ"xÄb®K˚W°ÄA ê| 28† *8ù \8| K˚Z—ÄA ;‡ˇ‰H  (  AÇ $;ˇˇˇˇ48  K˚a=ÄA ;√  (  @Çˇ‹Ä} \K˚YçÄA 8ü  Ä} \K˚a-ÄA Ä} \K˚YâÄA 8  K˚`˝ÄA ;√  Éﬁ  Ä} \ê~  ®| ∞~ ®| ∞~ $„48! HªÅˇÄ |¶NÄ  8`ˇËNÄ  |¶ø¡ˇ¯ê êa êÅ î!ˇ¨8Å 8êÅ HK˚c≠ÄA ÄÅ HKˇ˙AÄa l®É , BAÇ 0, FAÇ 0, GAÇ 0, HAÇ 0, IAÇ 0, @AÇ 4H  ƒH H  ºH 	-H  ¥H 	ΩH  ¨H 
IH  §8` H ÅH  òÉ„ ®  , AÇ  , AÇ (, AÇ ,, AÇ $H  l8Å @Ä Kˇ˘°H  \8  H %H  PÄ |c4pc ˇpcˇˇ;√  ® pc |c5AÇ ®  , AÇ  8~  H ’;√  ,  AÇ 8~  H ÈÄb¯Äc \K˚XÄA Äa pK˚_•ÄA K˚WÌÄA 8a 8Kˇ˘ı|cx8! Tª¡ˇ¯Ä |¶NÄ  |¶ø·ˇ¸ê É‚¯î!ˇ¿Ä K˚_uÄA 8a 8K˚_ÅÄA Ä  8É 8a 8Äc  K˚_ÅÄA (  AÇ  8` K˚_ÖÄA Äc  K˚_ëÄA H  Ä `8c ^K˚_}ÄA 8! @ª·ˇ¸Ä |¶NÄ  |¶ø°ˇÙê ;„  É¢¯î!ˇº8` Äù  ∞d l8ù  8 
Äc  K˚Z9ÄA ;√  ﬁ4®} <Äù  ∞d l, AÇ  , AÇ , AÇ $, AÇ 8H  <8û  8 
Äc  H  AH  (® pc	 @Ç 8 
Äc  H  •H  8  H -8! Dª°ˇÙÄ |¶NÄ  |¶ø·ˇ¸ê êa êÅ î!ˇƒÄb¯É„  K˚RmÄA ®° Z8Å TÄÑ  8  K˚^ÖÄA (  AÇ (8 K˚]	ÄA |•*x®Å Z8  K˚^uÄA Kˇˆù8! <ª·ˇ¸Ä |¶NÄ  |¶ø°ˇÙê êa É¬¯É¢Ïî!ˇ∏É˛  K˚QÌÄA 8~ Ä  ê ∏8Ω ¥8Å `ÄÑ  8  K˚^)ÄA êa 8,  AÇ ,8 K˚\yÄA |∆2x®° 8®Å :8  K˚YÒÄA Kˇˆ	8! Hª°ˇÙÄ |¶NÄ  |¶øÅˇê ;£  É‚¯î!ˇ∏ú‚xÄ Äc  ®c $,  @Ç |cxKˇÛIH  ®} pc |c5AÇ ;Ä KˇÙ%8} 
K˚]ôÄA Äø sÉ ˇ8É  8} 
Äc  K˚]ïÄA Ä É√  ®~  ®û "|  @Ç x8` ˇ∞~ FÄ *Td'>pÑ AÇ TcˇAÇ Ä K˚Z˘ÄA H  H®~  Äü T|  @Ä Äø 8d  K˚]EÄA H  $®~ "Äü X|  @Å Äø 8d  K˚]!ÄA 8! HªÅˇÄ |¶NÄ  |¶ø·ˇ¸ê êa É‚¯î!ˇƒÄ *TcˇAÇ Äa Tpc H  ËÄa T, xAÇ x, XAÇ p, cAÇ p, CAÇ h, vAÇ h, VAÇ `, .AÇ `, dAÇ l, DAÇ d, uAÇ d, UAÇ \, zAÇ T, ZAÇ L, qAÇ L, QAÇ DH  dH 	H  \H ôH  TH %H  Là 0,  AÇ 8` ò 88` H  48` H  ,à 0,  AÇ |cxÄÇ∞d |cxH oµ`   |cx8! <ª·ˇ¸Ä |¶NÄ  |¶øaˇÏê ;É  É‚¯î!ˇ¥Ä Éc  ®{  ;√  ®{ ";£  Ä *Td'>pÑ AÇ4Td.˛pÑ AÇ , AÅ TcˇAÇ $sÉ ˇÄü L0§ êø Lòd  |cxê PH ,  @Ä–4|ˇ˛@Åƒ, AÅºH  }h   H 0H ,H ®H §H †H  †H H îH êH åH H ÑH ÄH |H xH tH pH lH  @H dH `H \H XH TH  (H  òH  §H  ¥H  ∏Tc:|¶|c|h¶NÄ  Ä PÄü LÄø H|Ö |dê PÄ Hê LÉﬂ TÉø XH Ä *Td~pÑ @Ç ÙTcæpc @ÇàÄ LÄü H| @AÇ¯Ä L8cˇˇê LÄ P8c ê PH ®|Ë @Ç†;ﬁˇˇH ò|Ë @Ç ;Ω ;›  H ÑÉﬂ TH |Éﬂ XH t® Z®ü Vƒﬁ5AÇ HÄ{ >Äc  Äü T§H   8}  3Ω àc  Äü L0§ êø Lòd  8~  3ﬁˇˇﬁ4,  @Çˇ‘, AÇ 8` 
Äü L0§ êø Lòd  KˇÙ°|cxê PH 0Ä *Tc~pc AÇ <|Ë @Ç , @Ç ,;ﬁˇˇÄ T| AÄ ÙÄ X| AÅ Ë8ù  8~  KˇÎÂ,  AÄ †Ä XÄü T|dÄü P8Ñˇˇ| @@Ç 8` K˚U•ÄA H  tÄ *Tc~pc AÇ 8û  3ﬁ ÉtKˇÏYH  PsÉ ˇÄü L0§ êø Lòd  Ä *Tcæpc AÇ  8Ä Ä L8cˇˇKˇË|cxê PH  PÄ P8cˇˇê PÄ X| @Å ;√  H  Ä T| @Ä ;√  Ä T|cKˇÌ—H  8` K˚TÒÄA 8! LªaˇÏÄ |¶NÄ  |¶ø¡ˇ¯ê É¬¯î!ˇ¿Ä~ É„  ® $,  AÇ `®  ®ü "|  @Ä PÄ~ *Tc'>pc AÇ $®  Äû T|  AÄ ® "Äû X|  @Å 8` K˚TiÄA H  H  !8` Kˇ˚Ò8! @ª¡ˇ¯Ä |¶NÄ  |¶ø·ˇ¸ê î!ˇºÄb¯Äc É„  ®ü $,  AÇ \®ü  ®ø "|( @Ä LK˚TeÄA K˚WçÄA KˇÒù8£  <ÄTE`ÑXTêÅ 8ê° <K˚TÖÄA pcˇˇÄÅ 8Ä° <K˚WqÄA KˇÚ8! Dª·ˇ¸Ä |¶NÄ  |¶ø·ˇ¸ê É‚¯î!ˇºÄ *Tc'>pc AÇ ,Ä Äc  ®É  Äø T|( AÄ ®c "Äü X|  @Å 8` K˚SYÄA H  p8ø <ÄTE`ÑXTêÅ 8ê° <K˚SQÄA ÄÅ 8Ä° <K˚VÈÄA ê ",  @Å ,K˚S-ÄA ê |cxK˚V›ÄA K˚VÌÄA |cxê |cxK˚S1ÄA 8! Dª·ˇ¸Ä |¶NÄ  |¶ê î!ˇ»Äb¯àc 4,  @Ç (K˚VπÄA K˚V…ÄA ,  @Ç H  K˚VÕÄA 8! 8Ä |¶NÄ  |¶øAˇËê É‚¯î!˝Ñ8` xK˚V=ÄA ;C  8z  K˚V•ÄA Ä d(  AÇ  8ö  K˚V•ÄA Ä dK˚O©ÄA H  ,K˚HıÄA 8z  K˚VôÄA (  @Ç 8` ò 4H ÿì_ d8a 8K˚G•ÄA |•*x8Ö  8z  K˚VyÄA ;É  Ä É√  ®~ JK˚PëÄA ®~ PK˚PùÄA à~ LK˚P©ÄA ®~ ;c  Äz  8c Ä  ê <Ä ê @®a @®Å <|d®ü £#÷®a >8c $∞a FÄ &H `   Ä &ÄÉ  <†øˇ`•ˇˇ|§ 8êÉ  |Ñ"x8|  K˚UÌÄA ®a <d4|d∞a DﬁÚxH  L®Å D®a FK˚U›ÄA 8a HH M’`   pcˇˇ8£ˇˇ|Ñ"x8a HK˚U—ÄA ®a D®ü |d∞a D;ﬁ |Ë @Ä  Äø &8Ä 8a HH Q`   (  @Çˇò8|  K˚U•ÄA K˚T≈ÄA ,  @Ç Ä &Äc  Tc~pc AÇˇ@8|  K˚UçÄA Äa 8K˚F9ÄA Äz  àc D|cu, @Ç 0K˚TuÄA ,  @Ç  8·H|∆2x8¶  8Ö  8z  K˚UYÄA 8!|ªAˇËÄ |¶NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå –}å48l  NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå ¿}å48l  NÄ  pl ˇqåˇˇÅb$}åXÆqå }åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆqå }åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå ÿ}å48l  NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå Ä}å48l  NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå ‹}å48l  NÄ  pl ˇqåˇˇÅb$}åXÆqå }åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆqå }åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆqå @}åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆqå 0}åt8l  NÄ  pl ˇqåˇˇÅb$}åXÆ}åtqå Ä}å5MÇ  hc  NÄ  pl ˇqåˇˇÅb$}åXÆqå @}åuMÇ  hc  NÄ  ÅÉ  Uå'>qÉ NÄ  ÅÉ  Uå~qÉ NÄ  ÅÉ  =`Ôˇakˇˇ}l`8ëÉ  ÅÉ  =`ﬂˇakˇˇ}l`8ëÉ  NÄ  |¶ê êa î!˛î8Å lÄaÑH Fa`   êa J|cx∞a N|cxòa R8a 8K˚FQÄA ,  AÇ ®a HÄÇXêd  8`ˇˇH  |cx8!lÄ |¶NÄ  |¶ê êa êÅ î!˝î8Å lÄaÑH EÌ`   êa J|cx∞a N|cxòa R8ÅlÄaàH E…`   êa T8a 8K˚E·ÄA ,  AÇ ®a HÄÇXêd  8`ˇˇH  |cx8!lÄ |¶NÄ  |¶ø¡ˇ¯ê É¬‡î!ˇ¨Ä¢‹8û 8a 8H  °(  AÇ 48û  8a 8H }`   ;„  (  AÇ Ä  dc ê  8  H  |cx8! Tª¡ˇ¯Ä |¶NÄ  |¶ø¡ˇ¯ê ;„  É¬‹î!ˇ¿(  @Ç ;˛ 8æ ÄÇ‡8Ñ 8  H  8! @ª¡ˇ¯Ä |¶NÄ  |¶øAˇËê ;C  ;ƒ  ;Â  Éb‡î!ˇ`Éø  8~  H Hı`   pcˇˇpc ˇ8c òz  ìA J|cx∞a N|Ñ"xòÅ R∞a T;ö Ä  8c ê  8É  ,'@Å 8` ê  Ä  |Ë @Ç |cxH  PÄﬂ  8æ  8õ 8|  H E]`   8a 8K˚DUÄA |c5,ˇ’@Çˇ†àz  pcˇˇ8£ 8ö 8z  H π`   8! †ªAˇËÄ |¶NÄ  |¶ê êa êÅ î!ˇ»H ç`   8£  ÄÅ TÄa PH  `    !MPCC |¶  //******************************************************************************// Title:       Line3D.h// Author:      Maarten Gribnau// Date:        07-04-1995// Purpose:     Interface definition for Line3D class.// Description: // Project:     Graph3D// Remarks:     //// Revision history:// Who:// Date:// What://******************************************************************************#ifndef _Line3D_h#define _Line3D_h #include "Vector3D.h" class Line