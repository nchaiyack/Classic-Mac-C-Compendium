WASTE Embedded Object Handler Archive
compile by Michael F. Kamprath, <kamprath@earthlink.net>
Version 1.1

This is a library of object handlers written in C designed for the WASTE Text Engine (by Marco Piovanelli).  This library is designed to be "drop and play," requiring very few mandatory calls by your WASTE based application.

To use this library, either add the source to your project, or, if you are using CodeWarrior, add the proper enclosed CodeWarrior library to your project.  It currently supports three types of objects: PICTs, sounds, and files.  The only header you need to include in the rest of your application's code (where appropiate) is WASTE_Objects.h.

One additional point: be sure to include any required resources (souch as the sound icon) in your project file.  Some object handlers depend on them.  If you decide to compile this archive yourself (you are using THINK C or something else), you will need to tell your compiler where the WASTE.h header file is (I do not include it in this archive, you will find it in the WASTE archive).

This archive requires WASTE 1.1a8 (CWASTE 1.1r12) or later.

Object Handler Initialization

There is one mandatory call that your application needs to make at initialization time to load all the object handlers into the WASTE engine:

OSErr	InstallAllWASTEObjHandlers( void )

This routine will load all appropiate handlers into the WASTE engine and intialize them (if need be).  If it returns an error, not all handlers were loaded properly.  This routine installs the handlers globally.

Other Handler Routines

Pictures

OSErr	InstallPICTObject( WEHandle theWE )

Use this routine if you wish to install the PICT object handler alone.  Pass a WEHandle to install into a particular WASTE instance, or pass nil to install globally.

Sounds

This library's method of implementing sound objects allows them to be played asynchronously.  To do this, several support routines have been implemented for your use.  Also, ICN# resource of ID 550 is used to provide the symbol for a sound object.  Two icons have been provided in this archive to choose from (or you can design your own).

OSErr	InstallSoundObject( WEHandle theWE )

Use this routine if you wish to install the sound object handler alone.  If you want the handler’s sound channel to be created at initilization, define CREATE_CHANNEL_AT_INIT in WE_snd_Handler.h to 1.  If you want the object handler to wait until the sound channel is actually needed, define CREATE_CHANNEL_AT_INIT to 0.  Pass a WEHandle to install into a particular WASTE instance, or pass nil to install globally.

void		CheckSoundStatus( void )

This routine must be called periodically (ideally in the event loop).  It checks the current sound status and, if need be, deallocates any sound buffer that is no longer in use.

Boolean	SoundIsPlaying( void )

Returns true if the sound shannel used by the sound object handler is currently playing a sound.  Otherwise, it returns false.

OSErr	PlaySelectedSound( WEHandle theWE )

This routine causes the currently selected sound in a WASTE instance to be played.  If no sound is selected, or if more "stuff" than just one sound is selected, nothing will happen.

OSErr	StopCurrentSound( void )

Calling this routine immediately terminates the playing of the current sound (if one is playing).

OSErr	CreateNewSoundObject( WEHandle theWE )
 
This routine will use the built in sound input on the Mac to add a new sound object to a WASTE instance.

OSErr	PlaySoundHandle( SndListHandle theSound )

This routine is made public in case your application will be playing other sounds outside of WASTE sound objects.  This routine will play a sound handle on the same asyncnronous channel that the WASTE sound objects are.  Please note that calling this routine copies the handle that is passed to it, so it is safe to dispose of the sound immediately after calling this routine.

Files

This library implements file onbjects with the same data that the Drag Manager describes a file with (HFSFlavor).  This allows seamless interaction with the finder and allows users to just dragh a file from the finder to a window containing a WASTE instance to add a file object.  To then open that file, the user just double clicks the file object in the WASTE instance and the Finder is sent an "Open Selection" apple event.

OSErr	InstallHFSObject( WEHandle theWE )

Use this routine if you wish to install the file object handler alone.  Pass a WEHandle to install into a particular WASTE instance, or pass nil to install globally.

OSErr	InsertFileRefFromFSSpec( FSSpec *theFile, WEHandle theWE )

This routine allows your application to insert a file object based on a passed file system specification record (typically obtained from a "Get File" dialog).

Please Read On…

Since this library is designed to be used with the WASTE text engine, this library shall fall under the same use license as the WASTE text engine.  That is, if you satisfy the use license of the WASTE text engine as outlined by Marco Piovanelli, the you are free to use this library in your application.

If you have some other object handlers that you would like to include in this library, and agree to release it under the licensing scheme listed above, please forward it on to me (Michael Kamprath) and I will incorporate it as best as possible.

If you find any bugs in the current version of this library, or have an comments for improvement, please send me a note.

Some sample code on how to use this archive in “advanced” ways is include in the Sample Code folder.

Release Info:

v1.0.0: (20 March 1995) Initial release.

v1.0.1: (21 March 1995) Update the object click handlers according to Marco Piovanelli's recomendations.

v1.0.2: (6 April 1995) Updated the archive for the WASTE 1.1a6 relese.  Marco implemented a new method of registering object handlers.

v1.0.3: (16 April 1995) Happy Easter!  Fixed two problems with file reference objects: 1) When using the InsertFileRefFromFSSpec() call, the icon would not be initially displayed correctly. 2) A crash when user drags a disk to a WASTE instance.  For now, the file reference handler will display a generic hard drive in this situation.  I will fix it later so that it will display the drive's actual icon.  Just wanted to make it so that it doesn't crash in this release.

v1.0.4: (8 May 1995) Updated the installer routines to be compatible with WASTE v1.1a8 (CWASTE v1.1r12).

v1.0.5: (22 May 1995) Updated the headers of the object archive so that it can be compiled under older Symantec enviroments.  Also added a gestalt check to CreateNewSoundObject() to ensure that some sort of sound input device is installed.

v1.1: (5 June 1995) Made several updates recomended by Chris Thomas <THUNDERONE@delphi.com>:
	- Playing a sound object no longer makes a copy of the sound.
	- API for stopping a ound and checking to see if one is playing.
	- Option to create sound channel at handler initialization (compiler switch).
	- Another optional icon design for sound object.
Also created routines to install individual object handlers.