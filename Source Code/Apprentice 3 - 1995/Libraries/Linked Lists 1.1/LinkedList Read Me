Linked List Classes
vers. 1.1
March 15, 1995

“What are These Linked List Classes?”

Because the logic behind creating a linked list is consistent no matter the type of variable being stored, they are a perfect candidate for a generic (template) class.  Many  C++ books, in fact, use the linked list as a classic example of a template class.  


“Why Use These Classes?”

Linked lists are very convenient to use because of their dynamic sizes and the relative speed with which they can be searched when they are small.  I’ve tried to include a set of functions to make it easy to add to,  and retrieve from, the list, letting you concentrate on coding other matters.  You can, for instance, have the list sort itself while you’re adding items, step down the list getting every item in the list with just a few calls, “cycle through” the list, getting the next item in the list (retrieving the top item if the current item is at the bottom), and get the xth item in the list.


“What’s Included?”

The Linked List Demo
I’ve included the Linked List Classes as well as a program showing an example of how I use the classes.  The Linked List Dem, simply maintains a list of window classes.  It is a small program that is fairly well documented so you can begin using it quickly (the actual List Class functions in LinkedList.cp, however, are sparsely commented).

Template How-To
Also included is a brief piece on how to specifically implement template classes in Symantec C++ (I couldn't find a rock-solid source for this information, so I hope this helps others who can't find it either).  The code was written and compiled on Symantec C++, v. 7, but will probably work in CodeWarrior, too.

Legel Stuff
Feel free to browse the code and use it any way and anywhere you want; it's freeware, though I retain the rights to it

If you have any questions, comments, find any bugs, or would like to see some other type of function added, email me at MaT101@aol.com

By the way, the CDEF in the demo app is courtesy of Zig Zichterman and makes my "OK" button look pretty sharp in the about box


Version History

version 1.1 - Reorganized the list classes conceptually to make distinctions between them more obvious; added a few list functions; got rid of nasty bug that was corrupting memory

version 1.0 - First release