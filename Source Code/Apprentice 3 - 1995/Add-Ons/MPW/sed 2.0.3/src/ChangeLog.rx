------ version 0.03 ------Fri Aug  6 01:57:28 1993  Tom Lord  (lord@unix1.andrew.cmu.edu)	* rx.c (re_search_2): sped up the fastmap search a little	  to as to not be slower than regex.c on simple patterns.	  Rx will still lose by a couple instructions in some degenerate	  cases but mostly will win.Thu Aug  5 11:39:57 1993  Tom Lord  (lord@thisbe.weh.andrew.cmu.edu)	* rx.c (re_search_2 & compilation front-ends): cache the starting	  superset of super-nfa's so that it isn't necessary to do an	  eclosure union for every call to re_search_2.	* rx.c (re_search_2): (from Eric Backus) arrange to call	  alloca(0) from a shallower stack frame than re_search_2	  if callling it at all.	  This could use a better cpp test.  Right now, an extra function	  call is added to re_search_2 unles __GNUC__ is defined.  If	  there were something like _HAVE_LOSER_ALLOCA_....	  	* rx.c (rx_compile, re_search_2, several new fns):	  changed the order of side effect lists so that possible	  futures that begin with complex effects more to the right	  are explored after futures more to the left.  Added	  a noop complex effect to alts and stars to guarantee	  they are explored in the right order.  An optimization	  after the parse removes some from the alts (and not all	  stars get them in the first place).  Changed the `best	  match' criterea -- now that possible futures are ordered	  posixly, we only want to check the length of the match.	  For a given length, the best subexpression partitioning	  is the first one found.	  A side effect of this is that Rx will always return the	  same register assignements for a given regexp/input text.	  Bummer :-) / 2.------ version 0.02 ------ed Jul 21 13:10:56 1993  Tom Lord  (lord@unix8.andrew.cmu.edu)	* rx.c (re_search_2): elaborated on the rule for picking the 	  best match so that the lengths of subexpressions are taken	  into account.  This is for Posix compatability.------ version 0.01 ------Sun Jun 13 17:20:35 1993  Tom Lord  (lord@tsunami.ucc.andrew.cmu.edu)	* This is the first release of rx.c.  Although some of the code	  is derived from regex.c, there is not much continuity between	  the two implementations.