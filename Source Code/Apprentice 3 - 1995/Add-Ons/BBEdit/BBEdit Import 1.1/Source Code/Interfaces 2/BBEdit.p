unit BBEdit;{ An alternate, non-official Pascal interface to }{ the BBEdit external architecture, version 3 }{ ANTI© 1993-1994 Merzwaren }interface{ NOTE: the official Pascal interface to the BBEdit external architecture forces }{ you to link in a library that uses global data; in THINK Pascal 4.0.x this means }{ that you have to build multi-segment code resources and explicitly set up }{ your A4-based globals with RemeberA4/SetUpA4 etc. }{ This alternate interface, on the other hand, uses direct inline calls. }{ While being a bit uglier and more prone to potentially fatal typos, IMHO }{ this approach lets you build BBEdit extensions with no globals and less overhead. }	type{ this data type is used in the "OpenSeveral call }		ReplyList = array[0..255] of StandardFileReply;		ReplyListPtr = ^ReplyList;		ReplyListHandle = ^ReplyListPtr;{ this data type is used by the "GetProjectList" call }		ProjectEntry = record				spec: FSSpec;				treeID: SignedByte;				found: Boolean;				fType: OSType;				fCrtr: OSType;			end;  { ProjectEntry }		ProjectEntryArray = array[0..255] of ProjectEntry;		ProjectEntryArrayPtr = ^ProjectEntryArray;		ProjectEntryArrayHandle = ^ProjectEntryArrayPtr;		BBEditExternalCallbackBlock = record				version: Integer;{ version 1 callbacks }				getWindowsContentsProc: ProcPtr;				getSelectionProc: ProcPtr;				setSelectionProc: ProcPtr;				getDocInfoProc: ProcPtr;				getModDateProc: ProcPtr;				copyTextProc: ProcPtr;				pasteTextProc: ProcPtr;{ version 2 callbacks }{ text-editing stuff }				getLastLineProc: ProcPtr;				getLineNumberProc: ProcPtr;				getLineStartProc: ProcPtr;				getLineEndProc: ProcPtr;				getLinePosProc: ProcPtr;				insertTextProc: ProcPtr;				deleteTextProc: ProcPtr;{ getting and setting window text }				setWindowContentsProc: ProcPtr;				contentsChangedProc: ProcPtr;{ reading file text }				getFileTextProc: ProcPtr;{ direct user-interface calls }				getFolderProc: ProcPtr;				openSeveralProc: ProcPtr;				centerDialogProc: ProcPtr;				standardFilterProc: ProcPtr;				frameDialogItemProc: ProcPtr;				newDocumentProc: ProcPtr;				openDocumentProc: ProcPtr;{ utility routines }				allocateMemoryProc: ProcPtr;				findPatternProc: ProcPtr;				reportOSErrProc: ProcPtr;{ preference routines }				getPreferenceProc: ProcPtr;				setPreferenceProc: ProcPtr;{ progress routines }				startProgressProc: ProcPtr;				doProgressProc: ProcPtr;				doneProgressProc: ProcPtr;{ version 3 callbacks }{ project routines }				getProjectListProc: ProcPtr;				projectTextListProc: ProcPtr;			end;  { BBEditExternalCallbackBlock }		BBEditExternalCallbackBlockPtr = ^BBEditExternalCallbackBlock;	function BBGetWindowContents (w: WindowPtr;									getWindowContentsProc: ProcPtr): Handle;	inline		$205F,		{	movea.l	(sp)+, a0	; pop address off the stack }		$4E90;		{	jsr		(a0)				; do the callback }	procedure BBGetSelection (var selStart, selEnd, firstChar: LongInt;									getSelectionProc: ProcPtr);	inline		$205F, $4E90;	procedure BBSetSelection (selStart, selEnd, firstChar: LongInt;									setSelectionProc: ProcPtr);	inline		$205F, $4E90;	procedure BBGetDocInfo (w: WindowPtr;									var fName: Str255;									var vRefNum: Integer;									var dirID: LongInt;									getDocInfoProc: ProcPtr);	inline		$205F, $4E90;	function BBGetModDate (w: WindowPtr;									getModDateProc: ProcPtr): LongInt;	inline		$205F, $4E90;	function BBCopyText (copyTextProc: ProcPtr): Handle;	inline		$205F, $4E90;	procedure BBPasteText (pasteText: Handle;									pasteTextProc: ProcPtr);	inline		$205F, $4E90;	function BBGetLastLine (getLastLineProc: ProcPtr): LongInt;	inline		$205F, $4E90;	function BBGetLineNumber (selection: LongInt;									getLineNumberProc: ProcPtr): LongInt;	inline		$205F, $4E90;	function BBGetLineStart (selection: LongInt;									getLineStartProc: ProcPtr): LongInt;	inline		$205F, $4E90;	function BBGetLineEnd (selection: LongInt;									getLineEndProc: ProcPtr): LongInt;	inline		$205F, $4E90;	function BBGetLinePos (line: LongInt;									getLinePosProc: ProcPtr): LongInt;	inline		$205F, $4E90;	procedure BBInsertText (text: univ Ptr;									len: LongInt;									insertTextProc: ProcPtr);	inline		$205F, $4E90;	procedure BBDeleteText (deleteTextProc: ProcPtr);	inline		$205F, $4E90;	procedure BBSetWindowContents (w: WindowPtr;									contents: Handle;									setWindowContentsProc: ProcPtr);	inline		$205F, $4E90;	procedure BBContentsChanged (w: WindowPtr;									contentsChangedProc: ProcPtr);	inline		$205F, $4E90;	function BBGetFileText (vRefNum: Integer;									dirID: LongInt;									fName: Str255;									var canDispose: Boolean;									getFileTextProc: ProcPtr): Handle;	inline		$205F, $4E90;	function BBGetFolder (prompt: Str255;									var vRefNum: Integer;									var dirID: LongInt;									getFolderProc: ProcPtr): Boolean;	inline		$205F, $4E90;	function BBOpenSeveral (sort: Boolean;									var fileCount: LongInt;									var files: ReplyListHandle;									openSeveralProc: ProcPtr): Boolean;	inline		$205F, $4E90;	function BBCenterDialog (dialogID: Integer;									centerDialogProc: ProcPtr): DialogPtr;	inline		$205F, $4E90;	procedure BBFrameDialogItem (d: DialogPtr;									item: Integer;									frameDialogItemProc: ProcPtr);	inline		$205F, $4E90;	function BBNewDocument (newDocumentProc: ProcPtr): WindowPtr;	inline		$205F, $4E90;	function BBOpenDocument (openDocumentProc: ProcPtr): WindowPtr;	inline		$205F, $4E90;	function BBAllocateMemory (size: LongInt;									clear: Boolean;									allocateMemoryProc: ProcPtr): Handle;	inline		$205F, $4E90;	function BBFindPattern (text: univ Ptr;									textLen: LongInt;									textOffset: LongInt;									pattern: univ Ptr;									patLen: LongInt;									caseSensitive: Boolean;									findPatternProc: ProcPtr): LongInt;	inline		$205F, $4E90;	procedure BBReportOSError (code: OSErr;									reportOSErrorProc: ProcPtr);	inline		$205F, $4E90;	procedure BBGetPreference (prefType: ResType;									reqLen: Integer;									buffer: univ Ptr;									var actLen: Integer;									getPreferenceProc: ProcPtr);	inline		$205F, $4E90;	procedure BBSetPreference (prefType: ResType;									reqLen: Integer;									buffer: univ Ptr;									var actLen: Integer;									setPreferenceProc: ProcPtr);	inline		$205F, $4E90;	procedure BBStartProgress (str: Str255;									total: LongInt;									cancelAllowed: Boolean;									startProgressProc: ProcPtr);	inline		$205F, $4E90;	function BBDoProgress (done: LongInt;									doProgressProc: ProcPtr): Boolean;	inline		$205F, $4E90;	procedure BBDoneProgress (doneProgressProc: ProcPtr);	inline		$205F, $4E90;	function BBGetProjectList (spec: FSSpec;									var projectKind: Integer;									var count: Integer;									var list: ProjectEntryArrayHandle;									getProjectListProc: ProcPtr): Boolean;	inline		$205F, $4E90;	function BBProjectTextList (spec: FSSpec;									var textList: Handle;									projectTextListProc: ProcPtr): Boolean;	inline		$205F, $4E90;implementationend.