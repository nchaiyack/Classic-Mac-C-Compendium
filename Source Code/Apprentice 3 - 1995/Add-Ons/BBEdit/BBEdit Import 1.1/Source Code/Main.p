unit Main;{ BBIMPORT PROJECT: }{ Main Unit }{ ANTI© 1993-1994 Merzwaren }interface	uses		BBEdit;	procedure Main (var callbacks: BBEditExternalCallbackBlock;									wind: WindowPtr);implementation	uses		ExternQD, Import, SFDialogs, Translators, Utilities, XTNDInterface;	const{ resource IDs of alert templates }		kAlertXTNDNotAvailable = 1019;		kAlertSecondaryCheckFailed = 1020;		kAlertSysTooOld = 1021;{ other resource IDs }		kStringsFileNames = 1019;{ indexes into string lists }		kIndXTNDFolder = 1;		kIndXTNDEngine = 2;	function InitXTNDSystem: OSErr;		var			xtndEngineName, xtndFolderName: Str255;	begin		GetIndString(xtndEngineName, kStringsFileNames, kIndXTNDEngine);		GetIndString(xtndFolderName, kStringsFileNames, kIndXTNDFolder);		InitXTNDSystem := XTNDInitTranslators(xtndVersion, xtndEngineName, xtndFolderName);	end;  { InitXTNDSystem }	procedure ShowAlert (alertID: Integer;									filterProc: ProcPtr);		var			itemHit: Integer;	begin		SetCursor(GetQDGlobals^.arrow);		itemHit := Alert(alertID, filterProc);	end;  { ShowAlert }	procedure Main (var callbacks: BBEditExternalCallbackBlock;									wind: WindowPtr);		label			1;		var			hTransList, hText: Handle;			spec: FSSpec;			transIndex: Integer;			translator: Ptr;			document: WindowPtr;			err: OSErr;	begin		hTransList := nil;		hText := nil;{ turn the cursor to a wristwatch }		SetCursor(GetCursor(watchCursor)^^);{ make sure some necessary system software goodies are available }		if (not (FeatureAvailable(gestaltStandardFileAttr, gestaltStandardFile58) & FeatureAvailable(gestaltPopupAttr, gestaltPopupPresent) & FeatureAvailable(gestaltDITLExtAttr, gestaltDITLExtPresent) & FeatureAvailable(gestaltFSAttr, gestaltHasFSSpecCalls))) then			begin				ShowAlert(kAlertSysTooOld, callbacks.standardFilterProc);				Exit(Main);			end;{ try to initialize the XTND System }		err := InitXTNDSystem;		if (err <> noErr) then			begin				ShowAlert(kAlertXTNDNotAvailable, callbacks.standardFilterProc);				Exit(Main);			end;{ build the list of all available text translators }		err := BuildFormatList(allowText + allowImport, hTransList);		if (err <> noErr) then			goto 1;{ put up the Import File dialog box }		err := OpenDialog(callbacks.standardFilterProc, hTransList, spec, transIndex);		if (err <> noErr) then			goto 1;{ ask BBEdit to allocate a new handle to hold the imported text }		hText := BBAllocateMemory(0, false, callbacks.allocateMemoryProc);		err := memFullErr;		if (hText = nil) then			goto 1;{ if secondary version check is successful, import text }		if CanTranslate(spec, hTransList, transIndex, translator) then			begin{ do the translation }				err := ImportFile(spec, translator, hText, callbacks);				if (err <> noErr) then					goto 1;{ create a new document }				document := BBNewDocument(callbacks.newDocumentProc);				err := memFullErr;				if (document = nil) then					goto 1;{ set the doc contents to the imported text }				BBSetWindowContents(document, hText, callbacks.setWindowContentsProc);				hText := nil;			end		else{ secondary check failed }			ShowAlert(kAlertSecondaryCheckFailed, callbacks.standardFilterProc);{ clear result code }		err := noErr;1:{ clean up }		ForgetHandle(hTransList);		ForgetHandle(hText);{ report errors, if any }		if ((err <> noErr) and (err <> userCanceledErr)) then			BBReportOSError(err, callbacks.reportOSErrProc);	end;  { Main }end.