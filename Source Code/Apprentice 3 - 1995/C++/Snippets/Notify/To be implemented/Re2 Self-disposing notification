Newsgroups: comp.sys.mac.programmerPath: ruu.nl!news.nic.surfnet.nl!sun4nl!EU.net!sunic!uunet!tcsi.tcs.com!agate!library.ucla.edu!csulb.edu!csus.edu!netcom.com!ludisFrom: ludis@netcom.com (Ludis Langens)Subject: Re: Self-disposing notification crashesMessage-ID: <ludisCwArv6.IMo@netcom.com>Organization: Netcom Online Communications Services (408-241-9760 login: guest)References: <1994Sep16.163509.33240@waikato.ac.nz> <35bvgs$h87@nef.ens.fr>Date: Sat, 17 Sep 1994 23:28:18 GMTLines: 56In article <35bvgs$h87@nef.ens.fr> pottier@fregate.ens.fr (Francois Pottier) writes:>In article <1994Sep16.163509.33240@waikato.ac.nz>,>Lawrence D'Oliveiro, Waikato University <ldo@waikato.ac.nz> wrote:>>>>Anyway, this notification routine is very small, and is written in assembler.>>Here it is in its entirety:>>>>      move.l  4(sp), a0>>      _NMRemove>>      move.l  NMRec.nmRefCon(a0), a0>>      _DisposePtr>>      move.l  (sp)+, (sp)>>      rts>>>>Note that the DisposePtr call is disposing of the block containing the code>>I'm interested in this problem too. My notification routine looks exactly>the same way. It works perfectly, but I'm concerned that it might break in>the future.>>Apple has warned against this sort of thing; once the block is freed, you>can't make any assumptions about its contents (so you can't execute code in>it). This makes sense; in a preemptive multitasking system, the block could>very well by allocated by another process before you have time to rts out of>it.>>However, I don't see any other way of disposing properly of the Notification>Record. If you want your notification to appear after your normal code is>dead (INITs need to do that), then you must copy the response proc into a>standalone block in the System heap. And if you want to clean up properly,>you should release this block after it's been used. So there appears to be>no way to do the Right Thing here.To dispose the memory block out of which you are executing, try this:BlockStart EQU *        ...        MOVEQ   #$1F,D0           ;Trap number of DisposPtr        _GetTrapAddress OS        MOVE.L  A0,A1        LEA     BlockStart(PC),A0        JMP     (A1)Use this code as the very last thing you execute.  Make sure you haveremoved any parameters from the stack (so that an RTS can return toyour caller.)  The JMP (A1) goes to the memory manager directly,bypassing the trap dispatcher.  This means that registers D0-D2/A0-A1may be changed.  Once DisposPtr has freed the block, it will return(directly) to your caller.  When you link your code fragment, make surethat BlockStart is at offset 0 in the memory block.  This same trickcan be also be used with handles by adding a RecoverHandle (and gettingthe address of DisposHandle.)Ludis Langensludis@netcom.com