Path: ruc.dk!news.uni-c.dk!sunic!trane.uninett.no!nac.no!eunet.no!nuug!EU.net    !howland.reston.ans.net!gatech!bloom-beacon.mit.edu!news.kei.com    !news.mathworks.com!newshost.marcam.com!charnel.ecst.csuchico.edu!olivea    !news.hal.COM!decwrl!nsc!voder!apple.com!applelink.apple.comFrom: RODGERS@keps.COMNewsgroups: comp.sys.mac.oop.macapp3Subject: bug in 3.1.1 UMenuMgrDate: 18 Nov 1994 09:05:54 -0800Organization: AppleLink GatewayLines: 223Sender: daemon@apple.comMessage-ID: <785177611.1728036@AppleLink.Apple.COM>NNTP-Posting-Host: apple.com---- Internet E-mail Header ----From: rodgers@keps.com (Tim Rodgers)Mime-Version: 1.0Content-Type: text/plain; charset="us-ascii"X-Sender: rodgers@munsellTo: macapp3tech$@applelink.apple.comThere is a bug in MA3.1.1's UMenuMgr.cp that appears only when buildingdebug versions of applications.  If you've NOT installed Metrowerks, thenyou'll only see the problem in 68K debug versions of MA3.1.1 apps.  If youhave installed Metrowerks, then the bug shows up in both 68K and PPC debugversions of MA3.1.1 applications.  Whew.Basically, MA is keeping an array of CMNU handles.  That array is 64 wide -MA's list of "managed" menus.  Menu's are managed by their IDs.  The Debugmenu id is 900.  When MA attempts to "manage" the debug menu, it writes thehandle to the 900th array element of the 64-element handle array.  Oops.And it's an ugly one to track down because the corruption is usually foundmuch later in the code execution...Anyhow...  here's the message we received from Metrowerks.  Add it inyourself, or wait until it's fixed in MA3.1.2.Cheers!Tim~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~There is a bug in MA3.1.1 (I was not the source of the fix in the mods).The following is the "real" fix (also provided by Apple) as copied from amessage to another developer.  It will be incorporated into MA3.1.2.-----------------------------------------------------Thank you for alerting us to the problem. It has been entered in ourdatabase as problem ID 1199338.Nov 10 1994 11:11PM Tom Becker:Robert's analysis of the code is correct. StartMenuSetup saves the statusof the menus in an array dimensioned [64] and indexed by the menu ID.Because mDebug is 900, it will set memory way off the end of the array.Most of the time this is harmless because the array is on the stack so itis setting memory high on the stack. If you have a small stack or a fullheap it could cause problems. It should not be a problem in shipping codebecause then debug usually is turned off.The code has been fixed to use a stack instead of an array indexed by themenu ID. It now can work safely with up to 64 menus with any IDs.=46ix follows: In UMenuMgr.cp, replace functions StartMenuSetup,EndMenuSetup, and PerformMenuSetup with this code://----------------------------------------------------------------------------------------// CSetupMenus://----------------------------------------------------------------------------------------const short kMaxSetupMenus =3D mLastMenu + 1;class CSetupMenus{public:        CSetupMenus();        void StartMenuSetup(MenuHandle aMenuHandle);        void EndMenuSetup();protected:        short           fCount;        MenuHandle      fMenuHandle[kMaxSetupMenus];        Boolean         fEnabled[kMaxSetupMenus];        Handle          fMenuProc[kMaxSetupMenus];};//----------------------------------------------------------------------------------------// CSetupMenus::CSetupMenus://----------------------------------------------------------------------------------------#pragma segment MAMenuResCSetupMenus::CSetupMenus(){        fCount =3D 0;}//----------------------------------------------------------------------------------------// CSetupMenus::StartMenuSetup://----------------------------------------------------------------------------------------#pragma segment MAMenuResvoid CSetupMenus::StartMenuSetup(MenuHandle aMenuHandle){#if qDebug        if (fCount >=3D kMaxSetupMenus)        {                ProgramBreak("Array overflow: too many setup menus.");                return;        }#endif        // Remember if the menu itself was enabled.        // Save the menu's menuproc        fMenuHandle[fCount] =3D aMenuHandle;        fEnabled[fCount] =3D (Boolean)((*aMenuHandle)->enableFlags & 1);        fMenuProc[fCount] =3D (*aMenuHandle)->menuProc;// See comment below        ++fCount;        // Set the menu's menuproc to the NullMenuProc, so that        // CalcMenuSize is disabled (will do =C7alcMenuSize at end of setup)=.        (*aMenuHandle)->menuProc =3D pHNullMenuProc;        // Disable the menu and all of its items.        (*aMenuHandle)->enableFlags =3D 0;        // Uncheck all items.        short nItems =3D CountMItems(aMenuHandle);        for (short item =3D 1; item <=3D nItems; ++item)// Make sure we= don't checkitems with sub-menus        {                short theCmd;                GetItemCmd(aMenuHandle, item, &theCmd);                if (theCmd !=3D hMenuCmd)                        CheckItem(aMenuHandle, item, false);// moves/purgesmemory        }}//----------------------------------------------------------------------------------------// CSetupMenus::EndMenuSetup://----------------------------------------------------------------------------------------void CSetupMenus::EndMenuSetup(){        for (short i =3D 0; i < fCount; ++i)        {                MenuHandle aMenuHandle =3D fMenuHandle[i];                long newFlags =3D (*aMenuHandle)->enableFlags;                // If any items are enabled, enable the menu                if (newFlags !=3D 0)                {                        newFlags =3D (1 | newFlags);                        (*aMenuHandle)->enableFlags =3D newFlags;                }                // If the menu's enabled state changed, we have to draw themenu bar.                MenuID menuID =3D (*aMenuHandle)->menuID;                if (((newFlags & 1) =3D=3D 1) !=3D fEnabled[i])                        InvalidateMenuBar();                // Restore the menuproc.                (*aMenuHandle)->menuProc =3D fMenuProc[i];                // menuWidth set to 0 by routines that require CalcMenuSize,= by                // calling NeedCalcMenu.                if (!(*aMenuHandle)->menuWidth)                        CalcMenuSize(aMenuHandle);        }}//----------------------------------------------------------------------------------------// PerformMenuSetup://----------------------------------------------------------------------------------------void PerformMenuSetup(MenuSetupType TheMenuSetterUpper, void* staticLink){        CSetupMenus setup;        {// in a block to destroy the iterator                CMenuIterator iter;                for (MenuHandle item =3D iter.FirstMenu(); iter.More(); item= =3D(MenuHandle)iter.NextMenu())                        if (IsSetupMenu(item, kHierarchical))                                setup.StartMenuSetup(item);        }        TheMenuSetterUpper(staticLink);        setup.EndMenuSetup();        if (MenuBarHasPendingUpdate())                          // Neverexecuted on system with InvalMenuBar        {                // if InvalMenuBar is available don't redraw the menubardirectly                if (!qNeedsSystem7 || !TrapExists(_InvalMenuBar))                        DrawMenuBar();                ValidateMenuBar();        }        ValidateMenus();}---------------- End of Fix ---------------Tom BeckerMacApp Propeller HeadApple Computer, Inc.---------------------------------------Thank you,--Mark Anderson--metrowerks<<<<<<<<<<<<<<<<<<<<<<<<<<<<Ø---------------------------------------------------------------------------