From sgk%HappySize.co.jp@nig.ac.jp Sat Jun 19 20:57:17 1993
Received: from jack.nig.ac.jp (Æ133.39.128.64Å) by emma.ruc.dk (4.1/JBA-1.18)
        id AA12665; Sat, 19 Jun 93 20:57:08 +0200
Received: from voyager.nig.ac.jp by jack.nig.ac.jp (5.65+1.6W/2.7W/NIG3.4)
        id AA14592; Sun, 20 Jun 93 03:32:00 JST
Received: by voyager.nig.ac.jp (5.65+1.6W/TISN-1.2/NIGsubuucp-3.1)
        id AA29151; Sun, 20 Jun 93 03:39:00 JST
Received: from miyo.happysize.co.jp by digger.happysize.co.jp (5.65/HappySize/1.
1)
        id AA09685; Sun, 20 Jun 93 03:34:44 GMT
Return-Path: <sgk%HappySize.co.jp@nig.ac.jp>
Message-Id: <9306200334.AA09685@digger.happysize.co.jp>
Date: Sun, 20 Jun 1993 03:38:14 +0900
To: speck@ruc.dk (Peter Speck)
From: Shigeru Kanemoto <sgk%HappySize.co.jp@nig.ac.jp>
Subject: Re: Nuntius and Japanese alphabets
Status: O

Hello Peter,

Thank you for your understanding and efforts to include the kanji
function with Nuntius.

>  Does each line start with an indication (eg to switch to Kanji).
>     or do I have to remember the state from the previous line (seems to be the
>              case from the text I got, but has nntp some "standard" here).

It is not true that each line always start with an indication for kanji.
A line may start with roman letters, which does not need an indication,
you know. A line may also start with kanji letters with no indication
when the previous line ends in a kanji state.

So, you have to remember the state line to line. My source code has
such a state machine in it for the purpose. The state machine may exist
one or more same time. But, I don't know how you implemented the code
for your use.

However, almost all (95% or more?) Japanese text from the network have no
lines end in a kanji state. This is because of a rule or a defacto
standard defined by the Japanese internet community 5 or 6 years before.
This rule had been defined because

    1. There are unforgettable number of Japanese text displays and
       terminal emulators which are not able to handle control codes
       (eg., new line) correctly in a kanji state.

    2. Text transfering interfaces like nntp and smtp need to detect
       a line with single dot (.) to be informed the end of a text.
       If the last line of a text ends in a kanji state, the next char
       after the new line code will be an indicator for roman (because
       of a rule that a text should end in a roman state), the line of
       single dot will be a line with an indicator and a dot.

You might omit the mechanism to remember the indication state.
But, it is better to include such a mechanism.


>  To find out if an article is written using this encoding, I'm currently
>looking for at the number of escapes (0x1B) in the article.

It is good idea!
It might be best if you check the escape and trailing chars for valid
indicators. However, the trailing char is not always two when using with
languages other than Japanese. (two chars for Japanese and chinese)

>What is the default for Osaka

System font for Japanese system is Osaka. The default size for Osaka is
12point (as used in a menu bar). However, there is many Japanese fonts
other than Osaka. It is better if we can choose from them.

It is not able to show European letters correctly in Osaka font.
Japanese Macintosh users have been suffered with such a problem for a
long time. So, your idea to switch fonts is very welcome.

When using my conversion code, it is able to switch a output way
according to an indication. I have written a terminal emulator software
using the conversion code. This terminal emulator can switch fonts
according to an indication, like
    Geneva for US Roman
    Osaka for Japanese Roman, Katakana, Kanji
You might use such a mechanism. However, the code might not so fast.
(see TCVnew() in tcv.c for 'backend' arg function pointer.)

>Is there any other method? Any special headers? etc etc.

There are no special headers currently.
Your idea would be best.

We are very happy if we can choose separate fonts such as:
    font for European and US text
    font for Kanji and Katakana chars in Japanese text
    font for Roman chars in Japanese text (defaults to Kanji font above)

It is not needed to do other special translations from network code
to Macintosh special code which you are doing by checking the country
code in sender's e-mail address.


>I need some method to find out if the TEXT file is just plain ascii (the normal
>8bit charset, needed for Europe), or it is Kanji.  The only method I can think
>of now, is counting the number of 0x81 - 0x9F (range???).

Yes, it is real problem...
But the plan will not work perfectly. The program may be confused with
European
text and Japanese one. The problem is not only the European code and
Japanese
code. There are too many languages and code systems. There is no way to
detect
text code system used in a given text. Only human can do, you know.
It is better to add a check box or radio button on your posting dialog for
user
to choose a code of edited text. The default choise will be in the Prefs
menu
like 'add signature' check box.

However, such check boxes will be needed only when the program is used with
a language which needs ISO-2022 indication (currently just only
Japanese...)
You will not see such unnecessary check boxes in normal mode if you make
a sort of 'special' mode to handle ISO-2022 code.


A model of usage I thought is:

A new menu item and dialog Prefs-Language.
The selection of translation table in NewsServer dislog
moves to the new dialog

A new item at the last of the dialog.
A check Box "Use ISO-2022 international code"
    A check Box "Use Japanese Text" and menu selection "Font"
        A check Box "Use other font for Japanese Roman" and selection
"Font"
    A check Box for other languages..
And, a radio button for select "Default language to post".

If you check the check box "Use ISO-2022...", you will see
in the posting dialog:
a check box "Use ISO-2022 international code" already checked
a menu to select "Language of posting text"


This is just my wish. Please ignore if you do not like it.


Thank you again for your efforts!!!

--
Shigeru Kanemoto
sgk%HappySize.co.jp@nig.ac.jp
HappySize Incorporated.
