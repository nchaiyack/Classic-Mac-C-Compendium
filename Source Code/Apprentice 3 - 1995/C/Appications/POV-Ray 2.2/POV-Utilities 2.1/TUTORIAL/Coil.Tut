+-----------------------------------------------+
|       POV-Utilities Macintosh Tutorial        |
|                version 2.0                    |
|           by Eduard [esp] Schwan              |
+-----------------------------------------------+


UTILITY:  Coil


==============
1. WHAT IS IT?
==============

Coil wraps strands of spheres around the surface of a torus
(donut) shape.  You can specify the total number of spheres,
the number of wraps per revolution, the number revolutions,
and the torus'es inner and outer diameter.  Coil creates a
file formatted for either the CTDS utility or directly for
POV-Ray 1.0.  The coil is in the XY plane.


===================
2. HOW DO I USE IT?
===================

--------------
* Where is it?
--------------
Coil is in the Utilities menu, under the sub-menu "Scene File
Creation".  It is called "Coil Generator."

----------------
* The parameters
----------------
The parameters for Coil are:

Total # of spheres:
  This is the total number of spheres to use in all the strands
  that compose the whole coiled object.

...of radius:
  This is the radius of an individual sphere.

Total # of spheres in cross-section:
  This is the number of strands that wrap around the torus.

# of twists per revolution:
  This is the number of twists around the torus a strand makes
  in one complete "lap" around the torus.

Coil scale factor:
  This simply scales the overall object size (but not the
  spheres themselves.)  This is usually left at 1.0, and you
  would instead scale the object itself when it is created.

Outer/Major radius:
  A torus can be thought of as a sphere that is "orbited" around
  a central axis, sweeping out a donut shape.  The outer radius
  is the distance from the center of the orbit, to the center of
  the sphere.
Inner/Minor radius:
  The inner radius can be thought of as the radius of the orbiting
  sphere itself.

------------
* The Output
------------
POV-Ray:
Coil creates a file called Coil.inc, with an object called
Coil_Shape, and a texture over the whole shape called
Coil_Texture.  It uses the file name you pick to create the
shape and texture names.  So if you choose to create a file
called TeslaCoil.inc, the shape would then be called
TeslaCoil_Shape, and the texture would be TeslaCoil_Texture.

CTDS:
You can also output the coil in CTDS format, and run CTDS to
"connect the dots", making a smooth tubular coil, instead of
a bunch of discrete spheres.

-------------------------
* Post-processing cleanup
-------------------------
After creating the .inc file, you will need to create a scene
file that includes this coil.inc file, and has a camera
and light source.  You may also want to change the default
texture that was given to the object.  To do this, you can
either edit the texture in the coil.inc file, or better yet,
you can declare the new texture in your coil.pov scene file.
When you declare the object, use the new texture, e.g.:
  object { Coil_Shape texture {My_Texture} }
The latter is a little safer, because if you re-create the
coil.inc file, you won't wipe out the new texture you made
for it.

If you choose CTDS Output instead, you will have a coil.ctd
file.  Before you can use this with POV-Ray, you must first
run it through the CTDS utility to convert it to a coil.inc
file.  Please see the tutorial on CTDS for more information
on this, CTDS.Tut.


=============
3. AN EXAMPLE
=============

-----------------------------
* What we are going to create
-----------------------------
We want to create a coil object with two laps, and four
wraps around the torus per lap.  We will leave it in its
default orientation and size, in the XY plane, and unit
sized (<-1,-1,-1> to <1,1,1>).  We'll output straight
POV-Ray output, not CTDS.

Note: Since we specify the outer radius to be at 1.0, and
the spheres wrap around that, the coil is actually a bit
larger than unit size.

-----------------------
* What settings we need
-----------------------
In order to get enough spheres in the object so that they
overlap and create a solid strand for our example, we need
to set the "Total # of spheres" to 200.

To keep the strands fairly small so they don't overlap
each other, we will set the "of radius:" to 0.2.

To get two laps on the coil, we need to set the "Total # of
spheres in cross-section" text to 2.

To get four wraps on the coil, we need to set the "# of twists
per revolution" text to 4.

Since we want this to stay unit-sized, we leave the "Coil
scale factor" set at 1.0.

We will set the "Outer/Major radius" to 1.0, and the
"Inner/Minor radius" to 0.3 to get a normal aspect donut with
a hole in the middle.

To save the output file in POV-Ray format, make sure that the
"Output file format" radio buttons are set to "POV-Ray", not
"CTDS" format.

Pick an output file called CoilTut.inc, which will make our
object called CoilTut_Shape.  Save it in the TUTORIAL folder.
There is a CoilTut.POV file there waiting for us.

Click the OK button, and after a few seconds, the CoilTut.inc
file will be created.

------------------------------------------
* What post-processing steps we need to do
------------------------------------------
There are no cleanup steps for this tutorial.

We can now open the CoilTut.POV file in POV-Ray by simply
double-clicking on CoilTut.POV from the Finder.  POV-Ray will
open it, and we should be ready to take a look at our new
creation.  First, look through the CoilTut.POV file to see how
the object is included and placed in the scene, and how the new
texture is applied to it.

-----------------------------------------
* How to incorporate it into a scene file
-----------------------------------------
You may want to become familiar with the default scene that
is set up in UtilTut.inc.  This file places the camera, creates
a sky and floor, and illuminates the scene.  It assumes we are
in the negative Z direction, looking at 0,0,0.  This is included
in each of the Tutorial .POV files.  All we need to do is put
our object into the .POV file and render it.

At the end of CoilTut.POV you will see how the object is put
into the scene.

The include file we just created is included with the statement:
  #include "CoilTut.inc".
This defines the object shape, but doesn't create an object yet.
The object is declared on the next lines with:
  object
  {
    CoilTut_Shape
    // override CoilTut_Texture with our own.
    texture { UtilTut_Texture }
  }

In POV-Ray, set the Rendering Options to 160x120, and render
the image.  There it is!
