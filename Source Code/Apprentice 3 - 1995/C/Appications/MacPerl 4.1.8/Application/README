			Perl Kit, Version 4.0		Copyright (c) 1989,1990,1991, Larry Wall			  All rights reserved.    This program is free software; you can redistribute it and/or modify    it under the terms of the "Perl Artistic License" which comes with this Kit.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 		Perl Artistic License for more details.    You should have received a copy of the Perl Artistic License with this    Kit, in the file named "Perl Artistic License".  If not, I'll be glad to provide one.--------------------------------------------------------------------------Perl is a language that combines some of the features of C, sed, awk and shell.See the manual page for more hype.  There's also a Nutshell Handbook publishedby O'Reilly & Assoc.  Their U.S. number is 1-800-338-6887 (dev-nuts) andtheir international number is 1-707-829-0515.  E-mail to nuts@ora.com.Note that this and other email addresses, referred to in this MPW Perl package,may be used via AppleLink by appending @INTERNET# to the address.Perl will probably not run on machines with a small address space.Please read all the directions below before you proceed any further, andthen follow them carefully.After you have unpacked your kit, you should have all the files listedin MANIFEST.Installation1)  Run Configure.  This will figure out various things about your system.    Some things Configure will figure out for itself, other things it will    ask you about.  It will then proceed to make config.h, config.sh, and    Makefile.  If you're a hotshot, run Configure -d to take all the    defaults and then edit config.sh to patch up any flaws.    You might possibly have to trim # comments from the front of Configure    if your sh doesn't handle them, but all other # comments will be taken    care of.    (If you don't have sh, you'll have to copy the sample file config.H to    config.h and edit the config.h to reflect your system's peculiarities.)2)  Glance through config.h to make sure system dependencies are correct.    Most of them should have been taken care of by running the Configure script.    If you have any additional changes to make to the C definitions, they    can be done in cflags.SH.  For instance, to turn off the optimizer    on eval.c, find the line in the switch structure for eval.c and    put the command $optimize='-g' before the ;;.  You will probably    want to change the entry for teval.c too.  To change the C flags    for all the files, edit config.sh and change either $ccflags or $optimize.3)  make depend    This will look for all the includes and modify Makefile accordingly.    Configure will offer to do this for you.4)  make    This will attempt to make perl in the current directory.    If you can't compile successfully, try adding a -DCRIPPLED_CC flag.    (Just because you get no errors doesn't mean it compiled right!)    This simplifies some complicated expressions for compilers that    get indigestion easily.  If that has no effect, try turning off    optimization.  If you have missing routines, you probably need to    add some library or other, or you need to undefine some feature that    Configure thought was there but is defective or incomplete.    Some compilers will not compile or optimize the larger files without    some extra switches to use larger jump offsets or allocate larger    internal tables.  You can customize the switches for each file in    cflags.SH.  It's okay to insert rules for specific files into    Makefile.SH, since a default rule only takes effect in the    absence of a specific rule.    Most of the following hints are now done automatically by Configure.		For further information on compiling Perl for non-Macintosh systems, 		please refer to this section in a version of Perl distributed via Internet in 		either of the following locations:		For further information on compiling Perl for non-Macintosh systems, 		please refer to this section in a version of Perl distributed via Internet in 		either of the following locations:		nic.switch.ch				software/mac/perl		ftp.eunet.ch					software/mac/perl    If you want to build a version of Perl for non-Macintosh systems *only*, you    probably should go directly with the original Perl distribution, which can be found    at:    jpl-devvax.jpl.nasa.gov    pub/perl.4.0    If you get syntax errors on '(', try -DCRIPPLED_CC or -DBADSWITCH or both.    Machines with half-implemented dbm routines will need to #undef ODBM & NDBM.    C's that don't try to restore registers on longjmp() may need -DJMPCLOBBER.	(Try this if you get random glitches.)    If you get duplicates upon linking for malloc et al, say -DHIDEMYMALLOC.    Turn on support for 64-bit integers (long longs) with -DQUAD.5)  make test    This will run the regression tests on the perl you just made.    If it doesn't say "All tests successful" then something went wrong.    See the README in the t subdirectory.  Note that you can't run it    in background if this disables opening of /dev/tty.  If "make test"    bombs out, just cd to the t directory and run TEST by hand to see if    it makes any difference.  If individual tests bomb, you can run    them by hand, e.g., ./perl op/groups.t6)  make install    This will put perl into a public directory (such as /usr/local/bin).    It will also try to put the man pages in a reasonable place.  It will not    nroff the man page, however.  You may need to be root to do this.  If    you are not root, you must own the directories in question and you should    ignore any messages about chown not working.7)  Read the manual entry before running perl.8)  IMPORTANT!  Help save the world!  Communicate any problems and suggested    patches to me, lwall@netlabs.com (Larry Wall), so we can    keep the world in sync.  If you have a problem, there's someone else    out there who either has had or will have the same problem.    If possible, send in patches such that the patch program will apply them.    Context diffs are the best, then normal diffs.  Don't send ed scripts--    I've probably changed my copy since the version you have.  It's also    helpful if you send the output of "uname -a".    Watch for perl patches in comp.lang.perl.  Patches will generally be    in a form usable by the patch program.  If you are just now bringing up    perl and aren't sure how many patches there are, write to me and I'll    send any you don't have.  Your current patch level is shown in patchlevel.h.Just a personal note:  I want you to know that I create nice things like thisbecause it pleases the Author of my story.  If this bothers you, then yournotion of Authorship needs some revision.  But you can use perl anyway. :-)							The author.