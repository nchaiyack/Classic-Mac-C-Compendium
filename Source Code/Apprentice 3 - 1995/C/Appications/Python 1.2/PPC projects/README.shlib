How the python shared library architecture works under CodeWarrior PPC.
---------
There's a shared library, "PythonLibrary", which has the whole python
interpreter except the file "macmain.c". Building this library is slightly
tricky, especially since the instructions in the MetroWerks manual aren't
complete. Look at PythonLibrary.µ for details.

A shared library should not use the standard PPC runtime.lib, but in stead it should
select whatever you really need from the Runtime:Sources folder. The macshlglue.c
file also contains a little glue code.
PEF containers have three 'special' symbols: init, main and cleanup (Normal apps
have only main set). The Python Library has only an init: __sinit. This init
routine will be called with (among other things) the fsspec of the file we
were loaded from, which we tuck away so we can later obtain resources from the
library.

There's an application, "PythonShared", which contains only macmain.c.
This application does not use the standard PPC runtime, because it has to work
together with the bits of runtime that are located in the shared library. The
file macuseshlstart.c contains the code. It does need runtime.o, which contains the
code to do a jump to a shared library.

Finally, there is 'PythonApplet'. This uses a different main() routine (from macapplet.c),
which executes a PYC resource called __main__. It is best if this file does not have
type APPL, otherwise the finder may get confused.

Oh yeah, there's still the boring old "Python Standalone" application as well.

Building an applet
------------------
There's a script 'mkapplet.py' that builds a python applet. It asks you for a .py file
which it compiles. It copies the PythonApplet file (code and resources), copies you
compiled python to a PYC resource called '__main__' and sets the file type of the
resulting applet to APPL.


About finding the Lib directory
-------------------------------
The old trick for finding the Lib directory (to initialize sys.path) doesn't
work anymore, because applets can live anywhere. So, I've changed that bit. The
interpreter looks for an 'alis' resource with id 128 and uses that to find the Python
directory. If the resource doesn't exist (or that Alias Record is invalid) the
user is requested to point at the right directory. This information is then stored
in the resource fork of the shared library (or of the "Python Standalone" app).

About resources
---------------
There are now 4 resource files:
errors.rsrc - The Estr resource (which is generated, initially, by a python
    script) containing the OSErr message strings
library.rsrc - Resources for general use (one dialog, currently)
application.rsrc - Resources for a normal python interpreter (bundles and icons)
applet.rsrc - Resources for a python applet (other bundles and icons)

The library is built with the library.rsrc and errors.rsrc files, the application
with the application.rsrc file, the applet template with the applet.rsrc file and
the standalone interpreter with library.rsrc, errors.rsrc and application.rsrc.
