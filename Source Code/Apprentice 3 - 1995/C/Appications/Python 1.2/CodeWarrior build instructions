Instructions for building python using MetroWerks.
--------------------------------------------------

First of all, a warning: I put together this distribution of
project files based on a set of source files already partially
past the 1.2 distribution. This should not be a problem, but you
never know...

Second: a request. Writing this document has not been well-planned, so
please let me know which areas are incomplete, unclear or wrong.

The projects were tested using MetroWerks CodeWarrior 5.

Okay, I assume you have a directory 'Python 1.2' containing the
full python source distribution, Lib directory, Mac directory and
the stuff from the projects.sit file.

There's one thing that may need fixing in the CW 5 distribution: I seem
to recall a bug was reported in the MacTCP.h header file. However, I haven't
been able to reconstruct if (and how) I fixed it. Let me know if you
have problems with the mactcp module.

The projects all build an all-singing-all-dancing python, which includes
stdwin and the 'bgen' interfaces to various toolbox interfaces. If you don't
have stdwin remove the relevant sources and libraries and edit the config*.h
and config.c files. If you don't have the bgen-stuff remove the sources and edit
config.c. The bgen stuff, incidentally, is somewhere in the Extensions distribution.

For a PowerMac, the first thing to build is PythonStandalone. This builds a normal
python executable. Try it (run some things like importall and maybe testall).
Debugging is best done on this binary. Ignore the warnings about malloc(), calloc() and
free() being multiply-defined: python has its own malloc since the MW malloc reacts
strangely under the load python presents.

Next, if you're feeling adventurous you can build PythonLibrary, PythonShared
and PythonApplet. These build a PPC shared library, a (tiny) application PythonShared
that is basically only a stub for calling stuff in the library and a applet template
(more on that later). PythonShared should behave exactly like PythonStandalone. It is
probably a good idea to keep only one of them around otherwise the finder might get
confused. You can leave the PythonLibrary either in the application directory or move
it to the system folder. I keep it in the system folder, but I can't remember the reason
right now.

For a 68K, the only thing you can build is a normal standalone python, Python68K.
CW5 does not support CFM68K yet (CW6 will, according to MetroWerks) and that is needed
for shared libraries.

Actually, if you are really desperate for python-applets on a 68K, there is nothing
magical about the shared library. By comparing PythonApplet.µ to PythonShared.µ you
should be able to create a Python68KApplet.µ. However, since the resulting applets will
contain a complete python interpreter the diminuitive "applet" might not really be
appropriate. (Actually, Guido has managed to build a CFM68K-based python with applets
using Symantec C++ under MPW. It was, however, a rather arcane process which he didn't
dare explain to me).

What is this about applets?
---------------------------

Okay. Please note that this whole applet business is still only *very* lightly
tested (known to work on one specific machine, mine:-). The applets allow you to
"compile" a python program into a standalone application, similar to what AppleScript
or tcl allow you to do (although I haven't a clue whether they use similar mechanisms:
the one used by us was thought up by Guido and myself on a rainy afternoon).

First I should explain that mac-python can read compiled programs not only from the data
fork of ".pyc" files but also from resources. This is used when you create an applet:
you take the applet template, stuff a resource with pyc-code in, fiddle creator and a few
things and you're done. The applet main program will locate the resource and pass it
to the interpreter to execute. It will leave the initial Apple Events sent by the finder
upon startup alone (unlike the "normal" python interpreter, which eats them and constructs
sys.argv[] out of them), so you can also make droplets and what-have-you.

To build an applet you need a python source file and (optionally) a resourcefile. The
resourcefile should have the same name as the sourcefile, with ".rsrc" substituted for
".py". Run "mkapplet.py" (from the Mac directory) and give it the sourcefile. It'll copy
the AppletTemplate (found by looking along sys.path), compile the source into a resource
named "__main__" and copy the resources from the .rsrc file. The rsrc file can contain
bundle resources and an "Owner resource" and the correct file creator will be set on the
resulting binary. Without a resource file the creator will by 'PYTa' and the icon will
be something in-between the generic application-icon and the python-icon.

More fun.
---------

There's actually another interesting thing you can do with pyc-resources: if you put
a filename in sys.path (in stead of a directory name) the import code will look at
the 'PYC ' resources in that file to satisfy import statements (the resources should be
named with the module name). So, you could create a binary-only distribution of a python
program with only three files:
- The PythonLibrary shared library
- a Lib file, containing all modules from the original Lib directory in 'PYC ' resources
- your applet.

And, the first two files are universal for all applets, too! (Actually, it might even
be possible to put the 'PYC ' resources in the PythonLibrary shared library. Please let
me know whether this works, if you try it).

And, that is not all. You can also create dynamically-loaded extensions written in C.
Have a look at xxmodule.µ for some hints on how to go about creating them.

Known bugs.
-----------

The main bug is of course that all this stuff has only been tested very lightly, so you
shouldn't plan to base strategic products on it just yet. It is also unclear how CFM68K
will fare, and for this stuff to become part of official python it is definitely needed:
other methods for sharing code and doing dynamic loading are quite impossible to use
given the architecture of the python interpreter.

Finally, two bugs that have been found since the 1.2 distribution:
- The preferences file (used to locate the python directory, so sys.path can be built)
  is not updated correctly if you move the python directory. The workaround is to
  thrash it.
- The mac dbm module has some problems when used with a CodeWarrior-built python. This
  also influences things like pickle and shelve. The workaround is to ask me for an update.
  
Finally
-------

As said before: I am very interested in feedback, since it is all 