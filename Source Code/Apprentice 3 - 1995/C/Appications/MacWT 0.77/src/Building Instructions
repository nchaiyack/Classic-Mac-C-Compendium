Building InstructionsFar too often, code projects such as this one are distributed without the necessary pertinent information needed to know how to put all the parts together correctly.  This is the purpose of this document.Important:  please send me all improvements and fixes so that they may be incorporated into the latest build.CodeWarriorThis project has been designed with CodeWarrior 5.5 (Version 1.2.1).  If you are using Think C please refer to the section below.  This may be obvious stuff to certified CodeWarriors, but I'm sure that some people will find this useful.1. Load up MacWT.68k.π2. Make (cmd-M)3. Switch to the Finder4. Make an alias to MacWT 68k (The application that the Make just made), naming it MacWT.PPC.π.rsrc5. Load up MacWT.PPC.π6. Make (cmd-M)You now have a fully compiled MacWT development system which produced a brand-new fat MacWT application.  Now you can tinker!Think CI am including instructions here for people wanting to build MacWT on the Think C/Symantec C++ package.  I have not used the Cross Development Kit, Rainbow, or Symantec 8.0, but I assume that if you're using any of these, you probably don't need any instructions anyway.  Please note that I am doing all development in Metrowerks C, so I may be unaware of problems happening on the Think/Symantec side.1. Open the ANSI project2. Turn on 4-byte ints in the options3. Build it into a library called ANSI 4-byte4. Precompile your MacHeaders.c with the Universal Headers, and call it MH(Universal)5. Load MacWT.π and hit cmd-\6. Select Build Application… from the menuYou now have a 68k MacWT application.  Don't forget that this 68k application will try to use the 68881, and therefore will crash a PowerMac without SoftwareFPU.  Turn off 68881 generation if this is going to be a problem.  Or buy CodeWarrior :-)MPW C, Mr. C, GNU C, Harvest C, etc.I have never used any of these packages, so I can't give you much advice.  If you have neither CodeWarrior, Think C, or Symantec C++, I suggest opening the CodeWarrior project in BBEdit or BBEdit Lite and creating a makefile from it.  Don't forget to select 4-byte ints!  You will probably want 68881/2 generation too, if possible.If you make any succesful additions to the MacWT source, please forward them to:bmoc1@aol.comorBill Hayden1325 NE 9th StreetGainesville, FL  32601-3720Credit Where Credit is DueI will be producing updated versions over the next few weeks, and would like to incorporate any improvements that you have into the official build.  People who have aided tremendously on wt and MacWT in the past are:Stig S{ther Bakken (Stig.Bakken@pvv.unit.no)Justin Beech (justinb@lehman.com)Dan Egnor (egnor@ugcs.caltech.edu)David Engberg (snarklrd@leland.stanford.edu)Castor Fu (castor@drizzle.stanford.edu)Thomas Hamren (d0hampe@dtek.chalmers.se)Harm Hanemaayer (hhanemaa@cs.ruu.nl)Gerardo Horvilleur (mago@sunmexico.sun.com)Samo Kangaslampi (pekanga@freeport.uwasa.fi)Thomas Malik (malik@rhrk.uni-kl.de)Patrick L. McGillan (pmcgilla@magoo.uwsuper.edu)Russ Nelson (nelson@crynwr.com)Turly O'Connor (Turly.OConnor@isltd.insignia.com)Pekka Pietik{inen (pp@lyseo.otol.fi)Joseph Provine (provine@enel.ucalgary.ca)Ling Thio (H.L.Thio@et.tudelft.nl)Dave Thomas (dave@thomases.demon.co.uk)Monroe Williams (monroe@cs.pdx.edu)Marinos Yannikos (nino@vmars.tuwien.ac.at)Henner Zeller (zeller@linux2.rz.fh-heilbronn.de)If you want to get involved more seriously with development in this genre (not just wt & MacWT), you may want to join the wt mailing list.  Here is information from the original ReadMe file:• A wt mailing list has been started recently.  Topics will include improving the engine design and adding features, porting the engine to different architectures, and game design using the wt graphics engine.  The addresses are:• to subscribe:  wtm-request@magoo.uwsuper.edu• to post a message: wtm@magoo.uwsuper.edu• The wt ftp site is magoo.uwsuper.edu.  wt related files will be located in the /pub/wt directory.  (Note: MacWT is not on this site)