How Emacs reads and writes different text file formats======================================================Text files in general have one of three different formats, eitherUnix, Macintosh, or MS-DOS.  There is no particularly good reason forthree formats of text files, it is just historically so.The text editor Emacs can work internally with only the Unix format.This means some inspection and conversion must take place when Emacsreads text files of other formats.  So that Emacs can maintain textfiles formats across different versions on disk, Emacs must rememberthe original format of a text file and convert a buffer back to itwhen saving.  This document discusses when and how Emacs inspects andconverts text files.Some definitions:Throughout this document, "\n" is character 10, displayed in Emacs as^J, and "\r" is character 13, displayed in Emacs as ^M.Lines of text in Unix text files end with "\n".Lines of text in Macintosh text files end with "\r".Lines of text in MS-DOS text files end with "\r\n".When a file is written======================Emacs examines the per-buffer variable text-file-format.  If the valueis 'binary, 'unix, 'macintosh, or 'msdos, the file is written asdictated.  If the value is nil, the file name is compared with eachstring in the list binary-suffixes.  If there is a match, the file iswritten as binary.  If there is no match, the value ofdefault-text-file-format is used.  Whatever format is ultimately used,that format is written into the buffer's value of text-file-format.When a file is read===================Emacs uses two global variables default-text-file-format anddeduce-text-file-format.  When a file is opened for reading, anddeduce-text-file-format is nil, the value of default-text-file-formatis used as the file format.  If deduce-text-file-format is non-nil,then Emacs examines the file's Macintosh OS file type.  If it is not'TEXT', a binary read is done.  If 'TEXT', the file is searched forthe first end-of-line character or characters, and the format isdetermined from that search.When some file is read into a newly created buffer, the format usedfor reading is stored into that buffer's value of text-file-format.Variables and their ranges and defaults=======================================There are four variables used in dealing with file formats:text-file-format, a per-buffer variable, initially nil, should be one	of 'macintosh, 'unix, 'msdos, 'binary, or nil.default-text-file-format, a global variable, initially 'macintosh,	should be one of 'macintosh, 'unix, 'msdos, or 'binary.deduce-text-file-format-when-reading, a global variable, initially t,	 should be one of t or nil.binary-suffixes, a global variable, initially '(".elc"), should be a	list of strings.Notes=====In the File Formats submenu of the File menu, checked items are keptcurrent with the values of text-file-format, default-text-file-format,and deduce-text-file-format.There should be little reason to change the values ofdeduce-text-file-format or default-text-file-format.  If you changethem, make absolutely sure you know what you're doing.Changing the format of a file with Macintosh OS binary type:  Using theFile menu to change the format of the contents of a binary file in abuffer is allowed, but a bad thing to do.  If you read a binary file,change its format, then save the file, the data is converted, andmoreover the binary Macintosh OS type is preserved in the new version.But because the Macintosh OS type is a binary type, the next time thefile is opened, the data will be read as binary, and will not beconverted back.  This is probably not what you want.