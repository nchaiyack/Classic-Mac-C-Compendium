This is another "patchwork" but there are plenty of parts of it
that I created.  I did the interface and the editing.  And if I
didn't know *something* about programming it wouldn't work!

The heart of it is the Play_The_Riffs routine, linking the call
backs and bumping the buffer pointers around.

I got lots of help, via IM and snippets from knowledgable
programmers.  One in particular, who knows who he is.  I won't
tell you who and you won't pester him.  You can pester to me,
though.   : )

It uses two sound channels - one for the key hit sounds (creating
it and getting the resource on the fly) and one for the riffs
("riff" is a musician's equivalent to a "fragment" in programming:
a short passage of music).

This is also only ONE way of doing this.  You can play a series of
sound from a 'for' loop, a 'while' loop, from 'if' statements,
from a repeatedly called routine that just plays them with
stop-gap timing included - all sorts of ways.  You can also have
various numbers of sounds for your riffs, of varying lengths and
played in a certain sequence under varying conditions, for a
multitude of effects.

Look at Dan Sydow's animation sequencer 'for' loop.  Take out the 
limiter, use Do_The_Sound instead of DrawPicture, etc.  I tried it
and it worked.

The riffs are from "Are You Experienced" played backward, which is
actually forward because Jimi Hendrix recorded it backwards.  It's
not finely edited and you can spot the glitches.  I just wanted to
make a demo - not a masterpiece - but it's not *too* shabby! You
can get the idea.

"Miss Patty's" voice is from the DylanTalk source (a MacHack
thing) - the "Fred's Neighbor" voices.  I just tossed that in to
demonstrate a mouseDown played sound conjunction with a picture
draw.  MouseUp plays another sound and puts the rectangle back
like it was.

The screen area was fun to play with.  Anyone else notice "shades
of *3 in Three*" in the way it acts?  Since the window is screen
bounds, the 'ppat' is drawn starting at topLeft.  So any rects
drawn over it will land in the right spot no matter what size
screen (hopefully).

The intention, here, is to give novice programmers an avenue of
approach for incorporating these "sound possibilities" in the
programs they may want to create which needs such effects.

Enjoy!  (And learn.)

kenlong@netcom.com
