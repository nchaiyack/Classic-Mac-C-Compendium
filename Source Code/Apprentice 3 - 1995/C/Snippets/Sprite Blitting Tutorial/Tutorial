DISCLAIMER----------I do not consider myself an expert on mac programming. The code I providehere has been tested on a number of systems, and no real problems havebeen found (except one possibly - see below. I have reason to suspect thatthis problem is not caused by the direct-to-screen drawing code). As always,this information is supplied with no warranty and you use it at your ownrisk. I have tried various code examples which use CopyBits(), but I havenever actually used it. I started writing a game using a sprite toolkitwhich had an option for CopyBits() drawing or direct-to-screen drawing code.The CopyBits() code was much slower, and the custom blitters were still notas fast as I would have liked, so I decided to write my own. Here is the basicblitter code, and an explanation of how I use it in my game. There arelimitations, and there are ways to get around them. This is not a spritetoolkit, just a bit of code. You can use it as is, but you will probably haveto write your own code based on this. For my game, I took this, and wrote anumber of specialised blitters based on it for specific purposes. Theseblitters are not very general, but if someone wants the code I will provideit. I have deliberately not included it here as I don't feel it would be usefuland I don't want to be flooded with questions about it. My email address is atthe bottom of this note. This address will be valid until the end of 1995.After that, look for me lurking on the comp.sys.mac.programmer newsgroups. Iwill try to answer any questions you have on this, but I don't guarantee it.If I get one or two messages a week I will have time to answer them. If I get5 messages in a day then I won't have time, and I will probably just throw them out.Sorry about this. I don't have as much free time as I would like. If thereis enough demand, then I will update and maintain this document, andpossibly include code examples from other people (with permission of course).Send me your blitters, and I will include them in the next release (if there isone).The bottom line is that this information would have got me started a lotquicker. It is not the be-all and end-all of direct-to-screen drawing, butit should give you a bit of help along the way.Introduction------------The macintosh toolbox contains many routines for drawing. For copying graphicsbetween BitMaps or PixMaps, the mac has CopyBits(). This routine is extremelyversatile. It has a number of copying modes. If the source and destinationRects are not the same size, scaling is performed. If the colour depth orcolour palettes of the source and destination are not the same, then thesource image is mapped to the destination colour table. Because of all the extra checking it does, it is not as fast as it could be.When you want to do fast drawing (for instance in a sprite based game) it isoften better to spend a little more time setting up your drawing environmentsto get around these limitations. CopyBits used properly can be fairly fastif you make sure the source and destination Rects are the same size, and thecolour palettes are also the same. Even this is not always enough, and inorder to get more speed you might want to draw directly to the screen. Appledoesn't really like programmers doing this, but there are guidelines to follow,and as long as we follow these, we should be able to draw directly into screenmemory without sacrificing compatibility. I will outline these guidelines asI interpret them (which may not be as Apple interprets them!) and show howto get the addresses of screen memory and draw into this memory efficiently.Some Concepts-------------All graphics ports have either a BitMap (black and white windows) or PixMap(colour windows, offscreen GWorlds). A BitMap simply contains one bit perpixel on screen. These routines could be adapted to provide direct to screenblitting for 1-bit monitors, but it is probably not worth the effort. I willnot discuss BitMaps further. PixMaps can be any colour depth. For the rest ofthis discussion I will limit myself to 8-bit colour PixMaps, although I willmention some of the differences which would be required to write a 16-bit blitter.My mac will not support 16-bit colour, so I have no way to know if thesechanges will work in practice.Compatibility-------------Screens are graphics devices. You can get the base address (i.e. address of thefirst pixel of screen memory) of the screen. You shouldn't do this, since ifother applications have open windows, you will overwrite then indiscriminately.Instead it is better to open a window which covers the whole screen. I use a plain dialog box window so that there is no title bar. I hide the menu barand use that area for drawing. When my game is in progress, it will take overthe mac. Some people don't like that. Sorry, I just think it is better thatway. However, I will make sure that on the title screen (where you choosethe configurations, select start game, etc) the program behaves properly. Youwill be able to switch to other applications, and do everything how you wouldexpect the mac to behave. Although some people will disagree as to the bestway to do things, I think that a fast action game cannot possibly give uptime to background tasks when the game is in progress. If you find a way todo this without affecting gameplay, tell me!The bottom line is do it how you like, or how games you like do it! If yourgame is shareware or commercial, your decision may affect your income.The choice is yours.Flicker-Free Graphics---------------------I will assume that you are familiar with the concept of offscreen GWorlds(these are really just like screens which you can't see!). The blittercode demonstrates how to set up GWorlds. One common technique for obtainingflicker-free graphics is to use a GWorld which contains a copy of the screenif there were no sprites on it, another which can be used for erasing anddrawing sprites without the user seeing them, and then copy this to the screen.Not clear ? This may help - GWorld A: A copy of the screen - this is the 'master copy'.GWorld B: Temporary areaScreen: this is where you see it all !!!The steps for drawing are as follows:i) Decide where the sprite was last frame                               ----------ii) Erase the 'old sprite' from GWorld B by copying the same Rect from GWorld A.iii) Draw the new sprite in GWorld B at it's new position. How you do this     is up to you. If the sprite is stored as a 'cicn' resource, you can just     use PlotCIcon(). 'cicn' resources are convenient since they contain a mask     as well. I store my sprites and masks (more about this later) in yet another     GWorld.iv) Copy the area of GWorld B which bounds both the new AND old sprites to the    screen. This will erase the old sprite from the screen and draw the new.This technique is referred to as double buffering.You can cut out step (ii) and GWorld B by careful design of sprites. Before Iexplain how to do this, I will first explain the sprite mask.Sprite Masks------------Assume that your sprite is 32 x 32 pixels. If your sprite is circular, then youdon't want the corners drawing on screen; just the parts of the sprite wherethere is 'real sprite'. A sprite mask defines which pixels of the sprite toactually plot. For an 8-bit colour screen/GWorld, black is 255 and white is 0.For fast drawing, it is best to store the sprite mask in a GWorld of the samecolour depth (i.e. 8-bit), and set up your mask so that it is white where thesprite should be 'drawn' and black outside the sprite (but within the sprites'Rect'). That way, you can read the corresponding byte from GWorld A, logicallyAND it with the appropriate byte of the mask (this will set all bits of thesprite to 0 (white) and leave all bits 'outside of the sprite' unchanged.Then logically OR with the sprite data. For this to work, it is importantthat the sprite contain no colour outside of the corresponding mask.in C, this is:*screenMemory++ = (*gWorldAMemory++ & *maskMemory++) | *spriteMemory++;(this also increments the pointers to the next byte of screen memory).(See PICT resource 128 in the sample application for an example of howto set up your sprites).Cutting Corners---------------Suppose your sprite can move 2 pixels to the right on each frame. If thesprite is 32 x 32, if you have the sprite bounded by a 34 (wide) x 32 (tall)rectangle and keep the leftmost 2 columns blank, then when you move the spriteto the right and redraw, then the new sprite will erase the old (since for theleftmost 2 columns, the above technique will draw from GWorld A). Since weerase the old and draw the new in a single step, there is no need for GWorldB.For this to work in general, you have to have enough 'free space' around thesprite you are drawing to erase the previous sprite, assuming it moves asfar in each direction as possible. This will be a game-dependant issue. Itmeans more work setting-up the sprites to be drawn, but the drawing is thenfaster. I think that this is a fair trade-off, although this method has onevery serious limitation.The Limitation--------------Since you are masking your sprites relative to the background, if twosprites overlap, they will erase one-another. For the game I am writing,the only sprite which can overlap other sprites will be the player. I cantherefore get away with checking which sprites overlap with the player(by having by Sprite data structure containing a Rect defining the size of the sprite, and a flag to set if there is overlap). If a spriteoverlaps with the player, then the only way to do the drawing properlyis by true double-buffering (as described above). You could alwaystry to erase the old player from the screen, draw the 'enemy sprite',then use the blitter to redraw the player, but using*screenMemory++ = (*screenMemory2++ & *maskMemory++) | *spriteMemory;(screenMemory and screenMemory2 both point to the same byte. You could do *screenMemory = (*screenMemory & *maskMemory++) | *spriteMemory;screenMemory++;but it is probably slower)If the monitor is updated at any point during drawing, then you willsee flicker. You could always do your drawing in a routine called duringa vbl interrupt (that is, during the time when the electron beam of themonitor is moving from the bottom of the screen to the top without drawing). I can't really recommend this method. On a low-end mac you probablywon't get your drawing done in time. If you want to know how to do this,see the chapter 'Vertical Retrace Manager' in Inside Mac - Processes.I did try this method, and I found that if the sprite was in the top quarterof the screen, you would get very bad flicker. This was with 4 other spriteson-screen on a lowly LC II (now you see why CopyBits() isn't fast enoughfor me!).The method I now use in my game is:i) erase old player sprite from GWorld B (using Gworld A as source).ii) draw the 'enemy' sprites. If the 'overlap' flag is set, draw inGWorld B, otherwise draw direct to screen.iii) draw the new player sprite in GWorld B (using GWorld B as source, sothat the proper masking is done:*gWorldBMemory++ = (*gWorldBMemory2++ & *maskMemory++) | *spriteMemory;(see comment above)iv) blit any 'enemy sprites' with 'overlap' flag set to screen. blitplayer sprite to screen. There is no need to do any masking here sinceit has already been done in GWorld B.Which technique you use will depend on the type of game you are writing, andthe behaviour of your sprites. Even if you choose to do the double-bufferingtechnique described above, this blitter can be used with slight modifications,and is still very fast.How many bytes to blit at a time--------------------------------The registers of the 680x0 processor are 32 bits wide. This means that foran 8-bit colour screen you can blit 4 bits at a time. In order to do thisyou need to declare your pointers as pointers to longs. A long is 4 bytes(= 32 bits). Check that your compiler uses 4 byte longs, or if there isan option, then you set it to use them. This blitter has been tested usingCodeWarrior 6 and Think C 6.0, and it works fine with either.The problem is this:if 'screenMemPtr' points to the first byte of screen memory, since screenMemPtrpoints to a long, doingscreenMemPtr++;will effectively add 4 to the pointer. It will make it point to the next long.In this case you could only start drawing at pixels which are a multiple of 4(horizontally - there is no such restriction vertically).How can you get around this restriction ?Well, you could declare your pointer as a pointer to a Byte, and only blit a single pixel at a time, but this would be much slower. I do my calculating'outside' of the actual blitter routine. That way, I can use a pointer toa Byte to set the memory pointer to ANY byte of screen memory (and any byteof the GWorld memory), and cast it to a 'long *' before passing it to the blitterroutine. That way you have the advantage of blitting 4 pixels in a singleinstruction, but the freedom to draw exactly where you want. This is illustratedin the attached code.Clipping at the edge of the screen----------------------------------This blitter doesn't do it. Sorry! I wrote this blitter for use in a game wheresprites always stay entirely on the screen. If your sprite is half off screen,you are writing to memory which you have no way to know what is there. You couldcause a crash (or more probably a bus error).Since the number of rows of sprite to draw is declared in the blitter, you coulddecide if your sprite is half off the bottom of the screen, and if so,calculate how many lines to draw. You could then pass this number to the blitter as an additional parameter. Clipping to the top of the screencould be done in a similar way, although all pointers would have to be modifiedto point to 'half way down the sprite', 'half way down the mask', etc.Clipping to the left and right would be much harder, since there is no loopfor how many bytes to blit per row, and again the '4-pixels per instruction'advantage could become a disadvantage. You could quite easily write a blitterwhich does clipping at the sides of the screen using this code as a startingpoint, this would be much slower. In general, faster code is less versatile.That's life!24 and 32 bit memory mode-------------------------This is IMPORTANT. FAILURE TO COMPLY WILL CAUSE YOUR PROGRAM TO CRASH(as Arnie might say if he had time to program between beating the crapout of cyborgs).In order to access screen memory, you should be in 32 bit memory mode.In order to access the toolbox, you should be in whatever memory modethe computer was booted in. You should therefore switch to 32 bit mode(if you weren't already in it) before writing into screen memory, and backto 24 bit mode (if this is what you were in before) afterwards.The code below shows how to swap memory mode before and after blitting.Error Checking--------------All toolbox routines which return an error code should be tested to seeif they succeeded. This test code, and the corresponding application, don'thave any error checking. The most likely error will be failure to allocateenough memory for a GWorld. Increase the memory allocation. If this doesn'twork, check a few other things.First, are you in 8-bit colour mode ? As written this blitter will onlywork properly in 8-bit colour. See the document '16-bit colour' for adiscussion of necessary changes for a 16-bit blitter.Is it moving too fast for you to see (this is definitely possibly). Puta delay loop in and recompile. There are a couple of lines of code tobe uncommented which will slow it down to 30fps. I assume you have a Ccompiler. If not, then this won't be much use!You will need a 640 x 480 screen for the program to work as given, althoughit shouldn't take much to get it working on smaller screens.I had one report that with a 17" screen, the desktop OUTSIDE the drawing areawas blanked out, and the desktop was not properly redrawn on quitting. WhileI can see why the desktop was blanked out (I was originally passingqd.screenBits.bounds to NewCWindow), I don't know why it wasn't redrawn. Theperson who reported the bug didn't give me detailed system configuration info,so I am unable to check this out further.Last Word---------If this doesn't work, tell me, but if I get mail saying'it doesn't work' I will ignore it.If I get mail saying'when I run it on x system, y happens' it gives me some clues. In that caseI can have some chance of fixing the bug (not that there are any, of course!).Also, I have mentioned several times that I am writing a game. Please don'task me questions about it/offer to beta test. I have already had a number ofoffers. When I need beta testers I will post a request oncomp.sys.mac.games.action.If you really need more info, don't hesitate to ask, but please read thiswhole document first. If the info really isn't here, then I will try tohelp. My email address iselliott@ubaclu.unibas.ch.If email to this address bounces (which it will after 1995), you can sendsnail mail toDr Mark Elliott23 St. James AvenueDunsvilleDoncasterS. YorksDN7 4DNENGLANDIt may take a while for me to answer normal mail. If you can provide anemail address this will help.Enough rambling---------------Okay, I don't think that rambling any more will help. Here is the code:/* mask blitter. Assumes the frames of the sprite and mask	*//* are stored in a PICT resource ID 128, and the PICT for	*//* the background is ID 228.  As written, the test			*//* program assumes a 640 x 480 main screen, but could easily*//* be written to use a smaller screen. I have commented the	*//* lines which should be altered for smaller screens. The	*//* blitter does no clipping, so you should make sure that	*//* no part of your sprite is off the screen. This has		*//* happened a couple of times with me, and nothing went		*//* really wrong, but no promises.							*//* as given here, and compiled with CodeWarrior with 020	*//* codegen on, CSE and peephole optimisers on, manages		*//* 1053 frames per second on a 32 MHz 030 LC II. Without	*//* 020, CSE, peephole, still gets 1017 fps. 				*/#include <QDOffscreen.h>/* function prototypes */void InitToolBox(void);void main(void);void MarksMaskBlitter(long *, long , long *, long , long *, long , long *);/* initialise the toolbox - standard stuff */void InitToolBox(){	InitGraf(&qd.thePort);	InitFonts();	InitWindows();	InitMenus();	InitCursor();	TEInit();	InitDialogs(nil);	MaxApplZone();	MoreMasters();}/* main routine for the test program */void main(){	GrafPort killMenuBar;/* a pointer to the window, and its window record */	WindowPtr theWindow;	CWindowRecord myCWindowRecord;	short i, frame, x, y;/* data for the window and gworlds */	PixMapHandle iconPictPixMap, backdropPictPixMap;/* the MemPtr's point to the first byte of the PixMaps of the window *//* or offscreen GWorlds */	Byte *myCWindowMemPtr, *iconPictMemPtr, *backdropPictMemPtr, *maskMemPtr;/* the RowOffSet's are how many bytes you need to add to get to the *//* next pixel below */	long myCWindowRowOffSet, iconPictRowOffSet, backdropPictRowOffSet;/* use a gworld for the backdrop and one for the sprites/masks */	GWorldPtr iconPictGWorld, backdropPictGWorld;/* one pict for sprites, one for background */	PicHandle myPict, myBackdrop;/* the Rects are used for the window and gworld sizes */	Rect tempRect, fullScreenRect;/* these are used to store the current device to restore later */	CGrafPtr winPort;	GDHandle winDevice;/* the next line is for 24 bit memory mode compatibility */SignedByte mmuMode;/* uncomment the next line (and some later) to slow things down *//* long L; */	InitToolBox();	/* tempRect is the size of the sprite/mask PICT */		SetRect(&tempRect, 0,0,512,64);/* this should be changed if you have a different screen size */	SetRect(&fullScreenRect, 0, 0, 640, 480);		myPict = GetPicture (128);	myBackdrop = GetPicture(228);/* create a window, full screen, and hide the menu bar */		theWindow = NewCWindow(&myCWindowRecord, &fullScreenRect, nil,								true, plainDBox, nil, false, 0L);		OpenPort ((GrafPtr)&killMenuBar);	/* I don't know how this works ! */	EraseRect (&killMenuBar.portRect);/* draw the backdrop picture in it */	DrawPicture(myBackdrop, &fullScreenRect);	/* save current port */		GetGWorld(&winPort, &winDevice);/* create a gworld for the backdrop, erase it then draw the backdrop *//* picture in it *//* note that all gworld PixMaps are locked. In order to avoid memory *//* fragentation it is probably best to set up ALL the gworlds you need *//* at the start, and leave it at that. You might want to unlock the *//* PixMaps once in a while to allow the heap to be properly compacted. *//* I know nothing about memory handling yet, so I just do what others do *//* the '8' refers to the colour depth of the gworld. The colour tables *//* of the screen and GWorld should be the same */	NewGWorld(&backdropPictGWorld, 8, &fullScreenRect, nil, nil, 0L);	backdropPictPixMap = GetGWorldPixMap(backdropPictGWorld);	LockPixels(backdropPictPixMap);/* direct drawing to this new GWorld */	SetGWorld(backdropPictGWorld, nil);	EraseRect(&(backdropPictGWorld->portRect));/* faster to CopyBits (or blit) the picture from the screen, but we only do *//* this once, so it doesn't matter */	DrawPicture(myBackdrop, &fullScreenRect);	/* create a gworld for the icons, draw them, then reset the port */		NewGWorld(&iconPictGWorld, 8, &tempRect, nil, nil, 0L);/* need to get a handle to the GWorld's PixMap data structure */	iconPictPixMap = GetGWorldPixMap(iconPictGWorld);	LockPixels(iconPictPixMap);	SetGWorld(iconPictGWorld, nil);	EraseRect(&(iconPictGWorld->portRect));	DrawPicture(myPict, &tempRect);/* reset the port and device to what they were before */	SetGWorld(winPort, winDevice);	/* get addresses of main screen and gworlds *//* the 'RowOffSet' is the number of bytes per row *//* for a 640 x 480 screen or GWorld this will not be 640. You should usethe toolbox to return the correct value *//* there was a bit of discussion on csmp about whether to use 0x3FFF or *//* 0x7FFF. This works, so what more can I say. */	myCWindowMemPtr = (Byte *)(GetPixBaseAddr(myCWindowRecord.port.portPixMap));	myCWindowRowOffSet = (0x7FFF & (**myCWindowRecord.port.portPixMap).rowBytes);		backdropPictMemPtr = (Byte *)(GetPixBaseAddr(backdropPictPixMap));	backdropPictRowOffSet = (0x7FFF & (**backdropPictPixMap).rowBytes);		iconPictMemPtr = (Byte *)(GetPixBaseAddr(iconPictPixMap));	iconPictRowOffSet = (0x7FFF & (**iconPictPixMap).rowBytes);/* set up a loop for timing purposes */		y = 150;	frame = 0;		while (!Button());		/* wait for mouse press to help timing *//* do the whole thing 100 times */		for (i = 0; i < 100; i++)	{/* move the sprite from 0 to 599 horizontally, one pixel at a time */		for (x = 0; x < 600; x++)		{/* uncomment for delay loop *//* L = TickCount(); *//* the mask is stored in the same gworld as the sprite, but starts 32 pixels *//* below it (for a 32 x 32 sprite ), so get the pointer to it's memory *//* since 'iconPictMemPtr' points to the first byte of the PixMap, 'maskMemPtr *//* points to a pixel 32 rows below this, but still at the left side of the *//* PixMap. Need to add 32 bytes per frame to draw the right frame of the sprite */			maskMemPtr = iconPictMemPtr + (32 * iconPictRowOffSet);/* the next 2 lines are for 24 bit memory mode compatibility */	mmuMode = true32b;	SwapMMUMode (&mmuMode);/* note that all MemPtr's were defined as 'Byte *'. If we defined them as 'long *' *//* this would restrict drawing to multiples of 4 bytes horizontally. However in *//* the blitter we want to move 4 bytes at a time for speed, so there we want to *//* use pointers to 'long's. Hence the typecasting *//* we calculate where to draw based on x (horizontal) and y (vertical) coordinates *//* by adding '(y * backdropPictRowOffSet) + x' to both the backdrop and screen *//* memory pointers. *//* incrementing a pointer to a long (which is what we will do in the blitter) *//* is the same as adding 4 to a pointer to a Byte (since a long is 4 bytes) *//* so we need to divide all 'RowOffSet's by 4 before passing them to the blitter */	MarksMaskBlitter((long *)(backdropPictMemPtr + (y*backdropPictRowOffSet)+x),					backdropPictRowOffSet/4,					(long *)(iconPictMemPtr + (32 * frame)), iconPictRowOffSet/4,					(long *)(myCWindowMemPtr + (y*myCWindowRowOffSet)+x),					myCWindowRowOffSet/4, (long *)(maskMemPtr + (32 * frame)));/* for 24 bit compatibility: */	SwapMMUMode(&mmuMode);/* we have 8 frames of animation (0 - 7) in the PICT, so move to the next frame *//* although all are the same - I can't do graphics to save my life, but don't *//* worry - someone else is doing graphics for my game, and he's VERY good */			frame = (++frame) %8;/* uncomment for delay loop *//* while (L > TickCount() -2L); */					}	}/* wait for the mouse button to be clicked before exiting */	while (!Button());}/* the actual mask blitter *//* now all 'MemPtr's point to 'long's for speed on blitting */void MarksMaskBlitter(long *backdropPictMemPtr, long backdropPictRowOffSet,			long *iconPictMemPtr, long iconPictRowOffSet,			long *myCWindowMemPtr, long myCWindowRowOffSet, long *maskMemPtr){	short i;/* 32 rows to blit. Change this for other heights of sprite */		for (i = 0; i<= 31; i++)	{	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;	*myCWindowMemPtr++ = (*backdropPictMemPtr++ & *maskMemPtr++) | *iconPictMemPtr++;/* move all the memory pointers down to the next line, then back 8 'long's *//* (= 32 bytes) to get to the address below where we started. If we subtracted *//* the 8 before passing the 'RowOffSet' to the blitter, this would save on *//* calculation and might make it even faster *//* Since the blitter will only do 32-pixel wide sprites, 8 is the only number we *//* could have here *//* for a 48 pixel wide sprite have 12 repeats of the 'blit line', and subtract 12 */		myCWindowMemPtr += myCWindowRowOffSet - 8;		backdropPictMemPtr += backdropPictRowOffSet - 8;		maskMemPtr += iconPictRowOffSet - 8;		iconPictMemPtr += iconPictRowOffSet - 8;	}}