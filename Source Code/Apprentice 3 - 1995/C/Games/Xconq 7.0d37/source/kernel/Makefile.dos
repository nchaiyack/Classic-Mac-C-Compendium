# Makefile for interface-independent code in Xconq.
# Copyright (C) 1994 Ed Boston.

# Xconq is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

prefix = /usr/local

srcdir = .

# Set this for wherever the library directory should be.

LIBDIR = $(srcdir)/../lib

# Set this for wherever the man page should live.

MANDIR = /usr/man/manl

CC = cl

CFLAGS = -AL -Od -Zepi -DDEBUG -Gt10 

# Host and target-dependent makefile fragments come in here.
####
# End of host and target-dependent makefile fragments.

GAME_H = game.h gvar.def utype.def mtype.def ttype.def table.def

UNIT_H = unit.h action.def plan.def task.def

ALL_H = conq.h config.h misc.h dir.h lisp.h $(GAME_H) player.h side.h \
	$(UNIT_H) world.h history.h history.def module.h score.h \
	ai.h goal.def keyword.def

# Non-interface-specific object files.

OBJ = \
	init.obj \
	cmdline.obj \
	ai.obj \
	mplay.obj \
	mplay2.obj \
	actions.obj \
	combat.obj \
	run.obj \
	score.obj \
	world.obj \
	history.obj \
	module.obj \
	write.obj \
	read.obj \
	lisp.obj \
	mkterr.obj \
	mkunits.obj \
	mkrivers.obj \
	mkroads.obj \
	mknames.obj \
	side.obj \
	unit.obj \
	plan.obj \
	plan2.obj \
	task.obj \
	nlang.obj \
	grutil.obj \
	ps.obj \
	util.obj \
	help.obj \
	dos.obj \
	version.obj

# Object files needed by nonspecialized executables.

GOBJ =	generic.obj \
	types.obj \
	tables.obj

# Random C compiler flags.

MSDOS_CFLAGS = -DMSDOS -DUSE_CONSOLE -DXCONQLIB=\"$(LIBDIR)\"

ALL_CFLAGS = $(CFLAGS) $(MSDOS_CFLAGS) -I$(srcdir)

.c.obj:
	$(CC) -c /YX $(ALL_CFLAGS) $<

# Do it all.

all: conq.lib skelconq.exe

# The kernel library.  This is linked with interface code.

conq.lib: $(OBJ) $(GOBJ)
	!lib /PAGE:32 conq.lib -+$?;

# Test version of xconq.

skelconq.exe: skelconq.obj $(OBJ) $(GOBJ) compile.obj
	$(CC) $(ALL_CFLAGS) skelconq.obj $(OBJ) $(GOBJ) compile.obj

# Support things.

# (should do with a shell script, then can intercept failures)
special.h: skelconq
	skelconq <compile >special.h

tests:
	run-tests

# Usual cleaning, and flushing of anything junk-like.

clean:
	del *.obj 
	del *.log
	del *.bak

distclean: clean
	del *.exe
	del *.lib
	del msvc.*

realclean: distclean

# All the .h dependencies.

init.obj:		$(ALL_H)
cmdline.obj:	$(ALL_H)
mknames.obj:	$(ALL_H)
ai.obj:		$(ALL_H)
actions.obj:	$(ALL_H)
combat.obj:	$(ALL_H)
plan.obj:		$(ALL_H)
plan2.obj:	$(ALL_H)
task.obj:		$(ALL_H)
run.obj:		$(ALL_H)
score.obj:	$(ALL_H)
world.obj:	$(ALL_H)
history.obj:	$(ALL_H)
module.obj:	$(ALL_H)
read.obj:		$(ALL_H)
write.obj:	$(ALL_H)
side.obj:		$(ALL_H)
unit.obj:		$(ALL_H)
help.obj:		$(ALL_H)
nlang.obj:	$(ALL_H)
grutil.obj:	$(ALL_H)
ps.obj:		$(ALL_H)
util.obj:		$(ALL_H)
dos.obj:		$(ALL_H)
mkunits.obj:	$(ALL_H)
mkterr.obj:	$(ALL_H)
mkrivers.obj:	$(ALL_H)
mkroads.obj:	$(ALL_H)

generic.obj:	config.h misc.h lisp.h $(GAME_H)
types.obj:	config.h misc.h lisp.h $(GAME_H)
tables.obj:	config.h misc.h lisp.h $(GAME_H)

lisp.obj:		config.h misc.h lisp.h

mplay.obj:	$(ALL_H) mplay.h
mplay2.obj:	$(ALL_H) mplay.h

skelconq.obj:	$(ALL_H)

# This *must* be compiled by a proper ANSI compiler.

compile.obj:	$(ALL_H)




