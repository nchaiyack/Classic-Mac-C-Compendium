.\" mrtest.1 3.1 5/28/93
.TH MRTEST 1 "5/28/93"
.SH NAME
mrtest, mrtestv \- test-driver for the mrandom() routines
.SH SYNOPSIS
.B mrtest
.RB [ " nnn " ]
.RB [ " \-dnnnn " ]
.RB [ " \-S[n[,n \&.\|.\|. ]] " ]
.RB [ " \-mnnnnn " ]
.RB [ " \-Mnn " ]
.RB [ " \-q " ]
.RB [ " \-t " ]
.RB [ " \-e " ]
.RB [ " \-f " ]
.RB [ " \-v " ]
.RB [ " \-p " ]
.SH DESCRIPTION
.IX  "mrtest command"  ""  "\fLmrtest\fP \(em test random number generator"
.LP
.B mrtest
generates random integers, using any
one of several possible random number generation (RNG) algorithms,
then tests these integers for ``randomness''.

.SH OPTIONS
.TP
.B nnn
sets the number of random generates to be tested.  Default is 10.
.TP
.B \-dnnnn 
discards nnnn generates between tested values.  Default is 0.
.TP
.B \-S[n[,n[,n[,n[,n]]]]] initializes an RNG, as follows:
.IP
The first parameter sets the RNG algorithm, default 1, as
.RS
.IP 0.
an additive linear scheme (for testing only);
.IP 1.
4.3bsd random;
.IP 2.
Knuth/Bentley prand();
.IP 3.
L'Ecuyer's portable combined multiplicative RNG;
.IP 4.
4.3bsd nrandom48;
.IP 5.
4.3bsd rand;
.IP 6.
Press and Teukolsky's ran0;
.IP 7.
Press and Teukolsky's ran1;
.IP 8.
Press and Teukolsky's ran2; and
.IP 9.
Maraglia's Ultra.
.RE
.IP
The second parameter sets the first RNG seed, default 1.
.IP
The third parameter sets the second RNG seed, default 1.
Note that most RNG algorithms will ignore this value.
.IP
The fourth parameter sets the number of times to cycle the RNG
before starting the tests, mod 1 billion.  Default is 0.
.IP
The fifth parameter of \-S sets the number of times to cycle the RNG
before starting the tests, div 1 billion.  Default is 0.
.TP
.B \-mnnnnn
or
.B \-Mnn
sets the range of the RNG to be nnnnn or 2^(nn), respectively.
At most one of these two options should be selected.
Default is -m100.
.TP
.B \-q
or
.B \-quiet
turns off the (default) printing of each random integer, as it is generated.
.TP
.B \-t
eliminates most RNG tests, for timing measurements.
.TP
.B \-e 
echos the command line.  Useful in scripts.
.TP
.B \-f
or
.B \-p
selects one of two non-default methods, other than mrandom(),
for generating random integers.
The \-f option uses (int)(frandom()*m), which is slightly
faster, but also slightly biased.
The \-p uses xrandom()%m to generate integers, a poor method for many RNGs.
.TP
.B \-v
uses the vectorized interface, mrandomrv().
.LP
Note: the last three options are unavailable in the version of the code,
.B mrtestv,
compiled with \-DVECTORIZED.
In mrtestv, the mrandomrv() call is always used.
.LP
The
.B script
file supplied with the software distribution contains a number of csh-level
calls to mrtest, illustrating its use as well as demonstrating various problems
with the 4.3bsd random number generators rand() and nrand48().

.SH AUTHOR
Clark Thomborson, cthombor@ub.d.umn.edu

.SH DIAGNOSTICS
If error-checking code in
.I init_rng, restart_rng,
or
.I save_rng
discovers a problem, an error message is printed on the stderr stream.

.SH "SEE ALSO"
random(3), rand(3C), drand48(3), mrandom(3)

.SH BUGS
The estimated standard deviations are merely estimates, and not very
accurate ones at that, especially on the upper tail.  A better
X-squared analysis routine would help.

.SH THEORY
For more information on the X-squared analysis implemented in this
code, see "Tools for Randomized Experimentation" by Clark Thomborson,
to appear in the Proceedings of the 25th Symposium on the Interface:
Computing Science and Statistics, 1993.
