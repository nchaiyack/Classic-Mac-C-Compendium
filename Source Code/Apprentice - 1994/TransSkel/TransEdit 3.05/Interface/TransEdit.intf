{ Pascal interface specification for TransEdit }{ for:       TransEdit 3.05 }{ last edit: 23 Feb 94 }{----------------------------------------------------------------------------}unit TransEdit;{----------------------------------------------------------------------------}interface{----------------------------------------------------------------------------}	type{----------------------------------------------------------------------------}{ Procedure types below are all equivalenced to ProcPtr. They're used so }{ that procedure/function specifications will read more similarly to their }{ C counterparts.  The comment preceding each type definition shows how }{ procedures should be written. }		{ procedure Key; }		TEditKeyProcPtr = ProcPtr;		{ procedure Activate (active:Boolean); }		TEditActivateProcPtr = ProcPtr;		{ procedure Close; }		TEditCloseProcPtr = ProcPtr;{----------------------------------------------------------------------------}{ Interface routines }{----------------------------------------------------------------------------}	function NewEWindow (bounds: Rect;									title: Str255;									visible: Boolean;									behind: WindowPtr;									goAway: Boolean;									refCon: LongInt;									bindToFile: Boolean): WindowPtr;	function GetNewEWindow (resourceNum: Integer;									behind: WindowPtr;									bindToFile: Boolean): WindowPtr;	function GetEWindowTE (wind: WindowPtr): TEHandle;	function GetEWindowFile (wind: WindowPtr;									var fileInfo: SFReply): Boolean;	function IsEWindow (wind: WindowPtr): Boolean;	function IsEWindowDirty (wind: WindowPtr): Boolean;	procedure SetEWindowProcs (wind: WindowPtr;									pKey: TEditKeyProcPtr;									pActivate: TEditActivateProcPtr;									pClose: TEditCloseProcPtr);	procedure SetEWindowStyle (wind: WindowPtr;									font: Integer;									size: Integer;									wrap: Integer;									just: Integer);	procedure EWindowOverhaul (wind: WindowPtr;									showCaret: Boolean;									recalc: Boolean;									dirty: Boolean);	procedure SetEWindowCreator (creat: OSType);	function EWindowSave (wind: WindowPtr): Boolean;	function EWindowSaveAs (wind: WindowPtr): Boolean;	function EWindowSaveCopy (wind: WindowPtr): Boolean;	function EWindowClose (wind: WindowPtr): Boolean;	function EWindowRevert (wind: WindowPtr): Boolean;	function ClobberEWindows: Boolean;	procedure EWindowEditOp (item: Integer);	function FakeAlert (s1: Str255;									s2: Str255;									s3: Str255;									s4: Str255;									nButtons: Integer;									defButton: Integer;									cancelButton: Integer;									t1: Str255;									t2: Str255;									t3: Str255): Integer;implementationend.